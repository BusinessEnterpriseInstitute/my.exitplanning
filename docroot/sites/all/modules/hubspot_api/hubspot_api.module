<?php

/**
 * @file
 * HubSpot's login domain.
 */

use SevenShores\Hubspot\Factory;

define('HUBSPOT_API_LOGIN_URL', 'https://app.hubspot.com');
/**
 * HubSpot's API domain.
 */
define('HUBSPOT_API_URL', 'https://api.hubapi.com');
/**
 * HubSpot's API endpoint for initiating OAuth access.
 */
define('HUBSPOT_API_INIT_TOKEN_ENDPOINT', '/oauth/authorize');
/**
 * HubSpot's API endpoint for refreshing OAuth access token.
 */
define('HUBSPOT_API_TOKEN_ENDPOINT', '/oauth/v1/token');
/**
 * Recommended refresh time, 1 hour before token expiry.
 */
define('HUBSPOT_API_TOKEN_REFRESH', 3600);

/**
 * Implements hook_menu().
 */
function hubspot_api_menu() {
  $items = [];
  $items['admin/config/services/hubspot'] = [
    'title' => 'Hubspot API',
    'description' => 'Configure the Hubspot OAuth Connection.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['hubspot_api_admin_settings'],
    'access arguments' => ['administer hubspot api'],
    'file' => 'includes/hubspot_api.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['admin/config/services/hubspot/oauth'] = [
    'title' => 'Hubspot OAuth',
    'description' => 'Configure the Hubspot API integration.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
  ];
  $items['admin/config/services/hubspot/redirect'] = [
    'title' => 'Loading',
    'access arguments' => ['administer hubspot'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['hubspot_api_redirect_form'],
    'type' => MENU_CALLBACK,
  ];
  $items['hubspot/oauth'] = [
    'title' => 'Hubspot API OAuth Generator',
    'page callback' => 'hubspot_api_oauth_page',
    // Access will be checked in the page callback.
    'access callback' => TRUE,
    'file' => 'includes/hubspot_api.pages.inc',
    'page callback' => 'hubspot_api_oauth_redirect',
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Creates the Factory object that will be used to make api calls.
 *
 * @return \SevenShores\Hubspot\Factory
 *   The factory object.
 */
function hubspot_api_get_factory() {
  global $_hubspot_api_factory;
  $expiry = variable_get('hubspot_api_expire_date');

  // If the token is expired, reset it. Otherwise try to return the global
  // $hubspot object.
  if (!empty($expiry) && $expiry < time()) {
    hubspot_api_queue_refresh_tokens(variable_get('hubspot_api_refresh_token'));
  }
  else {
    if (!empty($_hubspot_api_factory)) {
      return $_hubspot_api_factory;
    }
  }

  $token = variable_get('hubspot_api_access_token');
  $_hubspot_api_factory = Factory::createWithToken($token);
  $_hubspot_api_factory->client->oauth2 = TRUE;

  return $_hubspot_api_factory;
}

/**
 * Implements hook_permission().
 */
function hubspot_api_permission() {
  $perms = [];
  $perms['administer hubspot api'] = [
    'title' => t('Administer Hubspot API'),
    'restrict access' => TRUE,
  ];
  return $perms;
}

/**
 * Redirect form callback.
 *
 * Processes any information and redirects to main settings page.
 */
function hubspot_api_redirect_form($form, &$form_state) {
  if (isset($_GET['code'])) {
    global $base_url;

    $options = [
      'method' => 'POST',
      'data' => http_build_query(
        [
          'grant_type' => 'authorization_code',
          'client_id' => variable_get('hubspot_api_client_id', ''),
          'client_secret' => variable_get('hubspot_api_client_secret'),
          'redirect_uri' => $base_url . '/admin/config/services/hubspot/redirect',
          'code' => $_GET['code'],
        ]
      ),
    ];
    hubspot_api_save_tokens($options);
  }
  else {
    if ($_GET['error'] == 'access_denied') {
      // Show error message if access was denied.
      drupal_set_message(t('Access was denied to HubSpot API.'), 'error');
    }
  }

  drupal_goto('admin/config/services/hubspot');

  return $form;
}

/**
 * Validate an api response from HubSpot.
 *
 * @param object $response
 *   API response from HubSpot API call.
 *
 * @return array|bool
 *   Boolean TRUE if there are no errors, array of error messages (strings) if
 *   errors.
 */
function hubspot_api_validate_response($response) {
  if (isset($response->data)) {
    $response_data = json_decode($response->data);

    if (isset($response_data->status) && strtolower($response_data->status) == 'error') {
      $error_messages = [];

      if (isset($response_data->message)) {
        $error_messages[] = $response_data->message;
      }

      if (isset($response_data->validationResults)) {
        foreach ($response_data->validationResults as $validationMessage) {
          if (isset($validationMessage->message)) {
            $error_messages[] = $validationMessage->message;
          }
        }
      }

      if (isset($response_data->failureMessages)) {
        foreach ($response_data->failureMessages as $failureMessage) {
          if (isset($failureMessage->error) && isset($failureMessage->error->message)) {
            $error_messages[] = $failureMessage->error->message;
          }
        }
      }

      // There was an error.
      return $error_messages;
    }
  }

  // No error.
  return TRUE;
}

/**
 * Checks to see if the api is connected.
 *
 * @return bool
 *   Is connected to the Hubspot API
 */
function hubspot_api_is_connected() {
  return
    (bool) variable_get('hubspot_api_access_token', '')
    && variable_get('hubspot_api_refresh_token', '')
    && variable_get('hubspot_api_client_id', '')
    && variable_get('hubspot_api_client_secret', '');
}

/**
 * Implements hook_cron().
 */
function hubspot_api_cron() {
  // Load the queue used to refresh OAuth keys.
  $queue = DrupalQueue::get('hubspot_api_refresh_tokens');

  // Stop if the queue is populated in order to prevent duplicates
  // from being added.
  if ($queue->numberOfItems()) {
    return;
  }

  // Add job to queue if the token expires within an hour.
  if (time() + HUBSPOT_API_TOKEN_REFRESH > variable_get('hubspot_api_expire_date')) {
    $queue->createItem(variable_get('hubspot_api_refresh_token'));
  }

}

/**
 * Implements hook_cron_queue_info().
 */
function hubspot_api_cron_queue_info() {
  $queues['hubspot_api_refresh_tokens'] = array(
    'worker callback' => 'hubspot_api_queue_refresh_tokens',
    'time' => 120,
  );
  return $queues;
}

/**
 * Cron queue callback to refresh tokens.
 *
 * @see hubspot_api_cron()
 * @see hubspot_api_cron_queue_info()
 */
function hubspot_api_queue_refresh_tokens($token) {
  global $base_url;
  $options = [
    'method' => 'POST',
    'data' => http_build_query(
      [
        'grant_type' => 'refresh_token',
        'client_id' => variable_get('hubspot_api_client_id', ''),
        'client_secret' => variable_get('hubspot_api_client_secret'),
        'redirect_uri' => $base_url . '/admin/config/services/hubspot/redirect',
        'refresh_token' => $token,
      ]
    ),
  ];
  hubspot_api_save_tokens($options);
}

/**
 * Saves the OAuth tokens to be used for later API calls.
 *
 * @param array $options
 *   The options use by the token endpoint. See API docs for more info.
 *
 * @see https://developers.hubspot.com/docs/methods/oauth2/get-access-and-refresh-tokens
 * @see https://developers.hubspot.com/docs/methods/oauth2/refresh-access-token
 *
 * @return bool
 *   Tokens were properly saved.
 */
function hubspot_api_save_tokens(array $options) {
  $response = drupal_http_request(HUBSPOT_API_URL . HUBSPOT_API_TOKEN_ENDPOINT, $options);
  $errors = hubspot_api_validate_response($response);
  if (is_array($errors) && !empty($errors)) {
    // Display any errors that may have occurred.
    foreach ($errors as $error) {
      watchdog('hubspot_api', 'Failed to get OAuth access token: %error', ['%error' => $error], 'error');
    }
  }
  else {
    $response_data = json_decode($response->data);
    // Save any Access/Refresh Tokens that may have been returned.
    $access_token = $response_data->access_token;
    $refresh_token = $response_data->refresh_token;
    $expires_in = $response_data->expires_in;

    variable_set('hubspot_api_access_token', $access_token);
    variable_set('hubspot_api_refresh_token', $refresh_token);
    variable_set('hubspot_api_expire_date', $expires_in + time());
    return TRUE;
  }
  return FALSE;
}
