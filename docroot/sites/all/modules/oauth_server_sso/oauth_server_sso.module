<?php
require_once 'includes/handler.php';
require_once 'includes/db_queries.php';
/**
* Implements hook_menu().
*/

  drupal_add_css( drupal_get_path('module', 'oauth_server_sso'). '/css/bootstrap.min.css' , array('group' => CSS_DEFAULT, 'every_page' => FALSE));
  drupal_add_css( drupal_get_path('module', 'oauth_server_sso'). '/css/style_settings.css' , array('group' => CSS_DEFAULT, 'every_page' => FALSE));

    function oauth_server_sso_menu()
    {
      $items['admin/config/people/oauth_server_sso'] = array(
        'title' => 'miniOrange OAuth Server Login Configuration',
        'description' => 'miniOrange OAuth Server Login Configuration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('oauth_server_sso_customer_setup'),
        'access arguments' => array('administer site configuration'),
        'file' => 'oauth_server_sso_customer_setup.inc',
      );
    $items['admin/config/people/oauth_server_sso/customer_setup'] = array(
        'title' => 'Customer Setup',
        'weight' => -9,
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('oauth_server_sso_customer_setup'),
        'file' => 'oauth_server_sso_customer_setup.inc',
      );
      $items['admin/config/people/oauth_server_sso/configure_client'] = array(
        'title' => 'OAuth Client',
        'weight' => -8,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('oauth_server_sso_config'),
        'file' => 'oauth_server_sso_config.inc',
        'type' => MENU_LOCAL_TASK,
      );
      $items['admin/config/people/oauth_server_sso/general_settings'] = array(
        'title' => 'General Settings',
        'weight' => -7,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('oauth_server_sso_settings'),
        'file' => 'oauth_server_sso_settings.inc',
        'type' => MENU_LOCAL_TASK,
      );
      $items['admin/config/people/oauth_server_sso/licensing'] = array(
        'title' => 'Licensing Plans',
        'weight' => -5,
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('oauth_server_sso_license'),
        'file' => 'oauth_server_sso_license.inc',
      );
      $items['admin/config/people/oauth_server_sso/support'] = array(
        'title' => 'Support',
        'weight' => -4,
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer site configuration'),
        'page arguments' => array('oauth_server_sso_support'),
        'file' => 'oauth_server_sso_support.inc',
      );
      $items['authorize'] = array(
        'access callback' => TRUE,
        'page callback' => 'oauth_server_sso_authorize',
        'type' => MENU_CALLBACK
      );
      $items['access_token'] = array(
        'access callback' => TRUE,
        'page callback' => 'oauth_server_sso_access_token',
        'type' => MENU_CALLBACK
      );
      $items['user_info'] = array(
        'access callback' => TRUE,
        'page callback' => 'oauth_server_sso_user_info',
        'type' => MENU_CALLBACK
      );
      return $items;
    }

    function oauth_server_sso_user_login(&$edit, $account)
    {
      $oauth_server_sso_red = variable_get('oauth_server_sso_red');
      drupal_goto($oauth_server_sso_red);
    }

    function oauth_server_sso_authorize()
    {
      global $base_url;
      if(user_is_logged_in())
      {
        global $user;

      $does_exist = DBQueries::get_user_id($user);

      if(empty($does_exist))
      {
        DBQueries::insert_user_in_table($user);
      }

        $client_id = $_REQUEST['client_id'];
        $redirect_url = $_REQUEST['redirect_uri'];
        $state = $_REQUEST['state'];

        handler::oauth_server_sso_validate_clientId($client_id);
        handler::oauth_server_sso_validate_redirectUrl($redirect_url);

        $code = handler::generateRandom(12);

        $num_updated = DBQueries ::insert_code_from_user_id($code, $user);

        if(!empty(variable_get('oauth_server_sso_redirect_url','')))
        {
          $url = variable_get('oauth_server_sso_redirect_url');
          if (strpos($url,'?') !== false) {
            $url =$url.'&code='.$code."&state=".$state;
          }
          else{
            $url =$url.'?code='.$code."&state=".$state;
          }
          $code_time = time();
          $authCodeTime = DBQueries ::insert_code_expiry_from_user_id($code_time,$user);
          drupal_goto($url);
        }
        else{
          echo "Redirect URL not configured.";
        }
      }
      else{
        $rem_val = $_SERVER['QUERY_STRING'];
        $redirecting_url = $base_url.'/?'.$rem_val;
        $array_form = explode(' ', $redirecting_url);
        variable_set('oauth_server_sso_red',$redirecting_url);
        user_cookie_save(['redirecting_url' => $redirecting_url]);
        drupal_goto('user/login');
      }
    }
    function oauth_server_sso_access_token()
    {
      $request_code = $_REQUEST['code'];
      $redirect_uri = $_REQUEST['redirect_uri'];
      $code = DBQueries ::get_same_code_as_received($request_code);
      if($code !='')
      {
        $user_id = DBQueries ::get_code_from_user_id($request_code);
        $client_id = $_REQUEST['client_id'];
        handler::oauth_server_sso_validate_clientId($client_id);
        $client_secret = $_REQUEST['client_secret'];
        handler::oauth_server_sso_validate_clientSecret($client_secret);

      /*   $code_request_time = db_select('oauth_server_sso_token', 'access_token_request_time')->fields('access_token_request_time')
                ->condition('user_id_val', $user_id['user_id_val'], '=')
                ->execute()
                ->fetchAssoc();
      */
      $code_request_time = $user_id['auth_code_expiry_time'];

        $grant_type = $_REQUEST['grant_type'];

        handler::oauth_server_sso_validate_code($code,$request_code,$code_request_time);
        handler::oauth_server_sso_validate_grant($grant_type);
        handler::oauth_server_sso_validate_redirectUrl($redirect_uri);

        $access_token = handler::generateRandom(255);

        $access_token_inserted = DBQueries ::insert_access_token_with_user_id($user_id['user_id_val'], $access_token);

        $url = $_REQUEST['redirect_uri'];
        if (strpos($url,'?') !== false) {
	        $url =$url.'&access_token='.$access_token."&expires_in=900&token_type=Bearer&scope=profile";
	      }
        else {
          $url =$url.'?access_token='.$access_token."&expires_in=900&token_type=Bearer&scope=profile";
	      }
        $arr = array('access_token' => $access_token, 'expires_in' => $expires_in, 'token_type' => 'Bearer', 'scope' => 'profile');
        $req_time = time();
        $accessToken_expiry_time_inserted = DBQueries::insert_access_token_expiry_time($user_id['user_id_val'],$req_time);
        echo json_encode($arr);exit;
      }
      else{
        print_r('Code missing');exit;
      }
    }
    function oauth_server_sso_user_info()
    {
      $access_values = array();
      foreach (getallheaders() as $name => $value) {
        $access_values[$name] = $value;
      }
      $string_full = $access_values['Authorization'];
      $access_token_received = trim(substr($string_full, 6));

      $user_id = DBQueries::get_user_id_from_access_token($access_token_received);

      $req_time = DBQueries::get_access_token_request_time_from_user_id($user_id['user_id_val']);

      if(!empty($user_id))
      {
        handler::ValidateAccessToken($req_time['access_token'], $req_time['access_token_request_time']);
      }
      else{
        echo "Access Token could not be retreived. Please try again or contact your administrator";exit;
      }
      $user_id = $user_id['user_id_val'];
      $user_details = user_load($user_id);
      $genericObject = new stdClass();

      $genericObject = (object) array(
    'uid'=>$user_details-> uid,
    'name'=>$user_details-> name,
    'mail'=>$user_details-> mail,
    'status'=>$user_details-> status,
    'timezone'=>$user_details-> timezone,
    'init'=>$user_details-> init,
    'roles'=>$user_details-> roles,
);
      echo json_encode($genericObject);exit;
    }
?>