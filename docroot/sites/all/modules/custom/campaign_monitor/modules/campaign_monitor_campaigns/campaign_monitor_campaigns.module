<?php

/**
 * Implements hook_menu().
 */
function campaign_monitor_campaigns_menu() {
  $items = array();
  $items['cm-list/%cm_list/campaigns'] = array(
    'title' => 'Campaigns',
    'page callback' => 'campaign_monitor_campaigns_list',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 'cm_list', 1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
    'weight' => -8,
  );
  $items['cm-list/%cm_list/campaigns/drafts'] = array(
    'title' => 'Drafts',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['cm-list/%cm_list/campaigns/sent'] = array(
    'title' => 'Scheduled/Sent',
    'page callback' => 'campaign_monitor_campaigns_list',
    'page arguments' => array(1, 3),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 'cm_list', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
    'weight' => 2,
  );
  $items['cm-list/%cm_list/campaigns/add'] = array(
    'title' => 'Create campaign',
    'description' => 'Add campaign to Campaign Monitor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_campaign_form', NULL, 1),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 'cm_list', 1),
    'file' => 'includes/campaign_monitor_campaigns.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  // Campaigns
  $items['cm-campaign/%cm_campaign'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Campaign',
    'title callback' => 'entity_label',
    'title arguments' => array('cm_campaign', 1),
    'page callback' => 'campaign_monitor_campaigns_cm_campaign_view', // change to 'entity_ui_entity_page_view' to show default extra fields.
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
  );
  // Campaigns
  $items['cm-campaign/%cm_campaign/recipients'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Recipients',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
  );
  $items['cm-campaign/%cm_campaign/opens'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Opens',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
  );
  $items['cm-campaign/%cm_campaign/bounces'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Bounces',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
  );
  $items['cm-campaign/%cm_campaign/clicks'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Clicks',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
  );
  $items['cm-campaign/%cm_campaign/unsubscribes'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Unsubscribes',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
  );
  $items['cm-campaign/%cm_campaign/spam'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Spam Complaints',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
  );
  // Campaigns
  $items['cm-campaign/%cm_campaign/recipients'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Recipients',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
    'weight' => 1,
    'tab_parent' => 'cm-campaign/%/view',
  );
  $items['cm-campaign/%cm_campaign/opens'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Opens',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
    'weight' => 2,
    'tab_parent' => 'cm-campaign/%/view',
  );
  $items['cm-campaign/%cm_campaign/bounces'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Bounces',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
    'weight' => 3,
    'tab_parent' => 'cm-campaign/%/view',
  );
  $items['cm-campaign/%cm_campaign/clicks'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Clicks',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
    'weight' => 4,
    'tab_parent' => 'cm-campaign/%/view',
  );
  $items['cm-campaign/%cm_campaign/unsubscribes'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Unsubscribes',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
    'weight' => 5,
    'tab_parent' => 'cm-campaign/%/view',
  );
  $items['cm-campaign/%cm_campaign/spam'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Spam Complaints',
    'page callback' => 'campaign_monitor_campaigns_stats',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cm_campaign', 1),
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
    'weight' => 6,
    'tab_parent' => 'cm-campaign/%/view',
  );
  $items['cm-campaign/%cm_campaign/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('cm_campaign', 1, 'edit'),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 'cm_campaign', 1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaign_monitor_campaigns.admin.inc',
  );
  $items['cm-campaign/%cm_campaign/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_campaign_delete_form', 1),
    'access callback' => 'entity_access',
    'access arguments' => array('delete', 'cm_campaign', 1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaign_monitor_campaigns.admin.inc',
  );
  $items['cm-campaign/%cm_campaign/raw'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Campaign',
    'title callback' => 'entity_label',
    'title arguments' => array('cm_campaign', 1),
    'page callback' => 'campaign_monitor_campaigns_cm_campaign_view', // change to 'entity_ui_entity_page_view' to show default extra fields.
    'page arguments' => array(1, 'raw'),
    'access callback' => TRUE,
    'file' => 'includes/campaign_monitor_campaigns.pages.inc',
  );
  $items['cm-campaign/%cm_campaign/send'] = array(
    'title' => 'Send',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_campaign_send_form', 1),
    'access callback' => 'campaign_monitor_send_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaign_monitor_campaigns.admin.inc',
  );
  $items['cm-campaign/%cm_campaign/unschedule'] = array(
    'title' => 'Unschedule campaign',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_campaign_unschedule_form', 1),
    'access callback' => 'campaign_monitor_unschedule_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaign_monitor_campaigns.admin.inc',
  );

  return $items;
}
/**
 * Access callback for sending a campaign.
 */
function campaign_monitor_send_access($campaign) {
  global $user;
  $can_update = user_access('administer campaign monitor') || $campaign->uid === $user->uid;
  $statuses = array(2, 3);
  // Don't allow campaign sending if status is one of "Pending" or "Sent"
  if ($can_update && !in_array($campaign->campaign_status, $statuses)) {
    return TRUE;
  }
  return;
}

/**
 * Access callback for unscheduling a campaign.
 * @param $campaign
 *
 * @return bool
 */
function campaign_monitor_unschedule_access($campaign) {
  global $user;
  $access = entity_access('update', 'cm_campaign', $campaign);
  $can_unschedule = FALSE;
  if ($access && $campaign->campaign_status == 3) {
    $now = strtotime('now');
    if (empty($campaign->send_date) || $campaign->send_date > $now) {
      $can_unschedule = TRUE;
    }
  }
  return $can_unschedule;
}

/**
 * Implements hook_permission().
 */
function campaign_monitor_campaigns_permission() {
  return array(
    'create campaign' => array(
      'title' => t('Create campaign'),
      'description' => t('Access to create Campaign Monitor campaigns'),
    ),
    'view own campaigns' => array(
      'title' => t('View own campaigns'),
      'description' => t('Access to view own Campaign Monitor campaigns'),
    ),
    'edit own campaigns' => array(
      'title' => t('Edit own campaigns in design status'),
      'description' => t('Access to edit own Campaign Monitor campaigns'),
    ),
    'delete own campaigns' => array(
      'title' => t('Delete own campaigns'),
      'description' => t('Access to delete own Campaign Monitor campaigns'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 * Inform the base system and the Field API about one or more entity types.
 */
function campaign_monitor_campaigns_entity_info() {
  $info = array();
  $info['cm_campaign'] = array(
    'label' => t('Campaign'),
    'plural label' => t('Campaigns'),
    'base table' => 'campaign_monitor_campaigns',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'static cache' => TRUE,
    'entity class' => 'CampaignEntity',
    'controller class' => 'CampaignEntityController',
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'campaign_monitor_campaigns',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'raw' => array(
        'label' => t('Raw content'),
        'custom settings' => FALSE,
      ),
    ),
    'fieldable' => TRUE,
    'bundles' => array(
      'cm_campaign' => array(
        'label' => t('Campaign Monitor Campaign'),
        'admin' => array(
          'path' => 'admin/campaign-monitor/campaigns',
        ),
      ),
    ),
    'access callback' => 'campaign_monitor_campaigns_access',
    'admin ui' => array(
      'path' => 'admin/campaign-monitor/campaigns',
      'controller class' => 'CampaignEntityUIController',
      'access arguments' => array('administer campaign monitor'),
      'file' => 'includes/campaign_monitor_campaigns.admin.inc',
    ),
    'uri callback' => 'entity_class_uri',
    'load hook' => 'cm_campaign_load',
  );
  return $info;
}
/**
 * Implements hook_entity_property_info_alter().
 */
function campaign_monitor_campaigns_entity_property_info_alter(&$info) {
  $properties = &$info['cm_campaign']['properties'];
  $properties['uid'] = array(
    'label' => t('User'),
    'type' => 'user',
    'description' => t('The user associated with the list'),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer campaign monitor',
    'schema field' => 'uid',
  );
  $properties['lid'] = array(
    'label' => t('List'),
    'type' => 'cm_list',
    'description' => t('The list entity associated with the campaign'),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer campaign monitor',
    'schema field' => 'lid',
  );
  $properties['edit_url'] = array(
    'label' => t('Edit Link'),
    'description' => t('The URL of the campaign\'s edit page.'),
    'getter callback' => 'campaign_monitor_campaigns_get_properties',
    'type' => 'uri',
    'computed' => TRUE,
    'entity views field' => TRUE,
  );
  $properties['delete_url'] = array(
    'label' => t('Delete Link'),
    'description' => t('The URL to delete a campaign.'),
    'getter callback' => 'campaign_monitor_campaigns_get_properties',
    'type' => 'uri',
    'computed' => TRUE,
    'entity views field' => TRUE,
  );
  $properties['preview_url'] = array(
    'label' => t('Preview Link'),
    'description' => t('The URL to preview a campaign template.'),
    'getter callback' => 'campaign_monitor_campaigns_get_properties',
    'type' => 'uri',
    'computed' => TRUE,
    'entity views field' => TRUE,
  );
  $properties['campaign_status'] = array(
    'label' => t('Status'),
    'type' => 'integer',
    'description' => t('The status of the campaign.'),
    'schema field' => 'campaign_status',
    'options list' => 'campaign_monitor_campaigns_status_list',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['created'] = array(
    'label' => t('Date created'),
    'description' => t('The date the campaign was created.'),
    'type' => 'date',
    'schema field' => 'created',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['send_date'] = array(
    'label' => t('Send date'),
    'description' => t('The date the campaign is scheduled to be sent.'),
    'type' => 'date',
    'schema field' => 'send_date',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['send_link'] = array(
    'label' => t('Send link'),
    'description' => t('The URL to send a campaign.'),
    'getter callback' => 'campaign_monitor_campaigns_get_properties',
    'type' => 'uri',
    'computed' => TRUE,
    'entity views field' => TRUE,
  );
  $properties['unschedule_link'] = array(
    'label' => t('Unschedule link'),
    'description' => t('The URL to unschedule a campaign.'),
    'getter callback' => 'campaign_monitor_campaigns_get_properties',
    'type' => 'uri',
    'computed' => TRUE,
    'entity views field' => TRUE,
  );
  $properties['automated'] = array(
    'label' => t('Automated flag'),
    'description' => t('A boolean value that determines if campaign was created through automation.'),
    'type' => 'boolean',
    'schema field' => 'automated',
    'setter callback' => 'entity_property_verbatim_set',
  );
}
/**
 * Callback for getting campaign properties.
 *
 */
function campaign_monitor_campaigns_get_properties($campaign, array $options, $name, $entity_type) {
  switch ($name) {
    case 'edit_url':
      if (empty($campaign->campaign_status)) {
        $options = array('query' => drupal_get_destination());
        return url('cm-campaign/' . entity_id($entity_type, $campaign) . '/edit', $options);
      }
      return;
      break;
    case 'delete_url':
      if ($campaign->campaign_status != 3) {
        $options = array('query' => drupal_get_destination());
        return url('cm-campaign/' . entity_id($entity_type, $campaign) . '/delete', $options);
      }
      return;
      break;
    case 'preview_url':
      return url('cm-campaign/' . entity_id($entity_type, $campaign) . '/raw');
      break;
    case 'send_link':
      if (campaign_monitor_send_access($campaign)) {
        $options = array('query' => drupal_get_destination());
        return url('cm-campaign/' . entity_id($entity_type, $campaign) . '/send', $options);
      }
      return;
      break;
    case 'unschedule_link':
      if (campaign_monitor_unschedule_access($campaign)) {
        $options = array('query' => drupal_get_destination());
        return url('cm-campaign/' . entity_id($entity_type, $campaign) . '/unschedule', $options);
      }
      return;
      break;
  }
}
/**
 * Callback for returning a list of subsriber states.
 */
function campaign_monitor_campaigns_status_list($campaign) {
  return array(
    0 => 'Design',
    1 => 'Draft',
    2 => 'Pending Approval',
    3 => 'Sent'
  );
}

/*******************************************************************************
 ********************************* Campaign API's ****************************
 ******************************************************************************/
/**
 * Access callback for Campaign entities.
 */
function campaign_monitor_campaigns_access($op, $campaign = NULL, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer campaign monitor', $account) ||
      user_access('create campaign', $account);
    case 'view':
      return user_access('administer campaign monitor', $account) ||
      (user_access('view own campaigns', $account) && ($campaign->uid === $account->uid));
    case 'update':
      return user_access('administer campaign monitor', $account) ||
      (user_access('edit own campaigns', $account) && ($campaign->uid === $account->uid) && (empty($campaign->campaign_status)));
    case 'delete':
      return user_access('administer campaign monitor', $account) ||
      (user_access('delete own campaigns', $account) && ($campaign->uid === $account->uid));
  }
}
/**
 *  Load a campaign.
 */
function cm_campaign_load($id = NULL, $reset = FALSE){
  $ids = (isset ($id) ? array($id) : array());
  $campaign = cm_campaign_load_multiple($ids, $reset);
  return $campaign ? reset ($campaign) : FALSE;
}
function cm_campaign_load_multiple($ids = array(), $conditions = array(), $reset = FALSE){
  return entity_load('cm_campaign', $ids, $conditions, $reset);
}
/**
 * Helper function to get the campaign entity id for a corresponding campaign id.
 */
function cm_campaign_get_campaign_entity_id($campaign_id) {
  $id = db_query('SELECT id FROM {campaign_monitor_campaigns} c WHERE c.campaign_id = :campaign_id', array(':campaign_id' => $campaign_id))->fetchField();
  if (!empty($id)) {
    return $id;
  }
  return;
}
/**
 * Delete single campaign.
 */
function cm_campaign_delete($campaign) {
   // Delete the campaign entity
   entity_delete('cm_campaign', entity_id('cm_campaign', $campaign));
}
/**
 * Delete multiple campaigns.
 */
function cm_campaign_delete_multiple($ids) {
  entity_delete_multiple('cm_campaign', $ids);
}

/**
 * Implements hook_views_api().
 */
function campaign_monitor_campaigns_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'campaign_monitor_campaigns') . '/views',
  );
}
/**
 * Helper function to ensure schedule date is not in the past.
 */
function campaign_monitor_campaigns_schedule_date_validate($element, &$form_state, $form) {
  $now = strtotime('now');
  $schedule_date = strtotime($element['#value']['date'] . ' ' . $element['#value']['time']);
  if ($schedule_date <= $now) {
    form_error($element, t($element['#title'] . '  must be in the future.'));
  }
}
/**
 * Implements hook_action_info().
 */
function campaign_monitor_campaigns_action_info() {
  return array(
    'campaign_monitor_campaigns_schedule_action' => array(
      'type' => 'cm_list',
      'label' => t('Schedule campaigns'),
      'configurable' => TRUE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'permissions' => array('administer campaign monitor'),
    ),
    'campaign_monitor_campaigns_unlock_list_action' => array(
      'type' => 'cm_list',
      'label' => t('Unlock lists'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'permissions' => array('administer campaign monitor'),
    ),
  );
}
function campaign_monitor_campaigns_schedule_action_form() {
  $form = array();
  $form['article'] = array(
    '#type' => 'textfield',
    '#title' => t('Newsletter'),
    '#description' => t('Choose an article from our database.'),
    '#autocomplete_path' => 'campaign-monitor/newsletter-autocomplete',
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Enter some keywords'),
    ),
  );
  $form['schedule_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d h:i:sa',
    '#date_year_range' => '0:+1',
    '#date_timezone' => date_default_timezone(),
    '#title' => t('Schedule Date'),
    '#description' => t('Choose a time in which this campaign should be sent.'),
    '#required' => TRUE,
    '#datepicker_options' => array('minDate' => 0),
    '#date_increment' => 15,
    '#element_validate' => array('campaign_monitor_campaigns_schedule_date_validate'),
  );
  return $form;
}
function campaign_monitor_campaigns_schedule_action_validate($form, &$form_state) {
  $values = $form_state['values'];
  // Validate the article node.
  if (!empty($values['article'])) {
    if (!is_numeric($values['article'])) {
      form_set_error('article', t('%id is not a valid article id.', array('%id' => $values['article'])));
    }
    else {
    $node = node_load($values['article']);
      if (!$node) {
        form_set_error('article', t('Unable to load article with id @id', array('@id' => $values['article'])));
      }
    }
  }
}
/**
 * Helper function to submit schedule form for the schedule action.
 */
function campaign_monitor_campaigns_schedule_action_submit($form, $form_state) {
  $values = $form_state['values'];
  // This has to be returned as an array or it blows up. (Unsupported Operand)
  return array('schedule_date' => $values['schedule_date'], 'article' => node_load($values['article']));
}
/**
 * Action submit function to run an action's action!
 */
function campaign_monitor_campaigns_schedule_action($list, $context) {
  $date = new DateTime($context['schedule_date'], new DateTimeZone('America/Denver'));
  $schedule_date = $date->format('Y-m-d H:i');
  $article = $context['article'];
  $campaign_id = NULL;
  $is_ready = campaign_monitor_campaigns_schedule_check_ready($list);
  // Check for active subscribers so we don't create campaigns stuck in draft.
  if ($is_ready) {
    $campaign = entity_create('cm_campaign', [
      'lid' => $list->id,
      'uid' => $list->uid,
      'list_id' => $list->list_id,
      'client_id' => $list->client_id,
      'subject' => $article->title,
      'from_name' => $list->from_name,
      'reply_to' => $list->reply_to,
      'automated' => 1,
      'background_color' => $list->background_color,
      'logo_region_status' => $list->logo_region_status,
      'logo_background_color' => $list->logo_background_color,
      'logo_link' => $list->logo_link,
      'banner_region_status' => $list->banner_region_status,
      'banner_link' => $list->banner_link,
      'profile_region_status' => $list->profile_region_status,
      'disclaimer_text' => $list->disclaimer_text,
      'promotional_text' => $list->promotional_text,
      'article_title' => $article->title,
      'article_body' => $article->body['und'][0]['value'],
    ]);
    $campaign->save();
    // Set a unique campaign name to use on Campaign Monitor.
    $campaign->name = 'Campaign ' . entity_id('cm_campaign', $campaign);
    // Set values for field_api fields from list.
    $list_logo = field_get_items('cm_list', $list, 'field_mc_logo');
    $list_banner = field_get_items('cm_list', $list, 'field_mc_banner');
    $list_profile_pic = field_get_items('cm_list', $list, 'field_mc_profile_pic');
    if ($list_logo) {
      $file = file_load($list_logo[0]['fid']);
      $campaign->field_mc_logo[LANGUAGE_NONE][0] = (array) $file;
    }
    if ($list_banner) {
      $file = file_load($list_banner[0]['fid']);
      $campaign->field_mc_banner[LANGUAGE_NONE][0] = (array) $file;
    }
    if ($list_profile_pic) {
      $file = file_load($list_profile_pic[0]['fid']);
      $campaign->field_mc_profile_pic[LANGUAGE_NONE][0] = (array) $file;
    }
    $campaign->save();

    // Now create a draft campaign on Campaign monitor.
    $wrap = campaign_monitor_get_api_object('CS_REST_Campaigns', NULL);
    $html_url = $GLOBALS['base_url'] . '/cm-campaign/' . entity_id('cm_campaign', $campaign) . '/raw';
    $result = $wrap->create($campaign->client_id, [
      'Subject' => $campaign->subject,
      'Name' => entity_label('cm_campaign', $campaign),
      'FromName' => $campaign->from_name,
      'FromEmail' => $list->from_email,
      'ReplyTo' => $campaign->reply_to,
      'HtmlUrl' => $html_url,
      'ListIDs' => [$campaign->list_id],
    ]);
    if ($result->was_successful()) {
      $campaign_id = $result->response;
      $campaign->campaign_id = $result->response;
      $campaign->campaign_status = 1;
      $campaign->save();
    }
    else {
      $error = $result->response->Message;
      $message = t('Failed with code @code. %error', [
        '@code' => $result->http_status_code,
        '%error' => $error
      ]);
      drupal_set_message($message, 'error');
    }
    // If we were able to create a draft campaign, lets schedule it.
    if ($campaign_id) {
      $send_wrap = campaign_monitor_get_api_object('CS_REST_Campaigns', $campaign_id);
      $result = $send_wrap->send([
        'ConfirmationEmail' => 'confirmations@exitplanning.com',
        'SendDate' => $schedule_date,
      ]);
      if ($result->was_successful()) {
        $campaign->campaign_status = 3;
        $campaign->send_date = strtotime($schedule_date);
        $campaign->save();
      }
      else {
        // Check for list size approval error which is code 334.
        // @see https://www.campaignmonitor.com/api/campaigns/#sending-draft-campaign
        if ($result->response->Code == 334) {
          $campaign->campaign_status = 2;
          $campaign->save();
        }
        $error = $result->response->Message;
        $message = t('Failed with code @code. %error', [
          '@code' => $result->http_status_code,
          '%error' => $error
        ]);
        drupal_set_message($message, 'error');
      }
    }
  }
  else {
    $message = t('Campaign scheduling skipped for List %list. No active subscribers.', ['%list' => entity_label('cm_list', $list)]);
    drupal_set_message($message, 'error');
  }
  // Set the list to locked to remove it from queue.
  $list->locked = 1;
  $list->save();
}

/**
 * @param $list
 *
 * @return bool
 */
function campaign_monitor_campaigns_schedule_check_ready($list) {
  $wrap = campaign_monitor_get_api_object('CS_REST_Lists', $list->list_id);
  $result = $wrap->get_stats();
  $ready = FALSE;
  if ($result->was_successful()) {
    $stats = $result->response;
    if ($stats->TotalActiveSubscribers > 0) {
      $ready = TRUE;
    }
  }
  return $ready;
}
/**
 * Action submit function to unlock lists.
 */
function campaign_monitor_campaigns_unlock_list_action($list, $context) {
  $list->locked = 0;
  $list->save();
}