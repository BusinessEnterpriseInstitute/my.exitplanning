<?php

module_load_include('inc', 'bei_recurly', 'includes/bei_recurly');

/**
 * Implements hook_menu().
 */
function bei_recurly_menu() {
  $items = array();
  
  $items['buy-membership/%'] = array(
    'title' => 'Buy Membership',
    'page callback' => 'bei_recurly_checkout',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['user/%/edit/membership/%'] = array(
    'title' => 'Edit Membership',
    'page callback' => 'bei_recurly_modal_callback',
    'page arguments' => array(1, 4),
    'access callback' => 'bei_recurly_modal_access_callback',
    'access arguments' => array(1, 4),
    'type' => MENU_CALLBACK,
  );
  $items['user/%/edit/membership/cancel/%'] = array(
    'title' => t('Canceling and Downgrading your Membership'),
    'page callback' => 'bei_recurly_cancel_callback',
    'page arguments' => array(1, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['user/%/edit/membership/billing/%'] = array(
    'title' => t('Edit your Billing Information'),
    'page callback' => 'bei_recurly_billing_callback',
    'page arguments' => array(1, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_node_info().
 */
function bei_recurly_node_info() {
$content_types = array(
    'subscription_plan' => array(
      'name' => 'Subscription Plan',
      'base' => 'node_content',
      'has_title' => '1',
      'title_label' => 'Plan Name',
      'description' => '',
      'locked' => TRUE
    ),
  );
  return $content_types;
}
/**
 * Implements hook_views_api().
 */
function bei_recurly_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bei_recurly') . '/views',
  );
}

function bei_recurly_checkout($plan_url) {
  global $user;
  $output = drupal_get_form('bei_recurly_checkout_form', check_plain($plan_url)); 
  return $output;
}

function bei_recurly_checkout_form($form, &$form_state, $plan_url) {
  if (isset($step)) {
    $form_state['stage'] = $step;
  }
  if (!isset($form_state['stage'])) {
    $form_state['stage'] = 'membership';
  }
  $form = array();
  $form = bei_recurly_checkout_get_header($form, $form_state);

  switch ($form_state['stage']) {     
    case 'membership':
      //find subscription node based on current path
      $subscription_nid = '';
      $active_plans = array();
      $query = new EntityFieldQuery(); 
      $query 
        ->entityCondition('entity_type', 'node', '=')
        ->entityCondition('bundle', 'subscription_plan')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_plan_checkout_link','url',$plan_url,'CONTAINS');
      $result = $query->execute();      
      if (count($result) > 0) {
        $subsciption_nid = key($result['node']);
        $subscription_node = node_load($subsciption_nid);
        $all_plans = recurly_subscription_plans();
        $enabled_plan_keys = variable_get('recurly_subscription_plans', array());
        $enabled_plans = array();
        //find active/enabled plans that match this subscription
        foreach($subscription_node->field_linked_recurly_plan_codes[LANGUAGE_NONE] as $sub_codes) {
          foreach ($enabled_plan_keys as $plan_code => $enabled) {
            foreach ($all_plans as $plan) {
              if ($enabled && $plan_code == $plan->plan_code) {
                if ($plan_code == $sub_codes['value']) {
                  $active_plans[$plan_code] = $plan;
                }
              }
            }
          }
        }
      }

      return bei_recurly_checkout_membership_form($form, $form_state, $active_plans, $subscription_node);
      break;  
    case 'contact': 
      return bei_recurly_checkout_contact_form($form, $form_state);  
      break;
    case 'billing': 
      return bei_recurly_checkout_billing_form($form, $form_state);  
      break;
    case 'review': 
      return bei_recurly_checkout_review_form($form, $form_state);  
      break;
    case 'thanks': 
      return bei_recurly_checkout_thanks_form($form, $form_state);  
      break;
    default:
      return bei_recurly_checkout_membership_form($form, $form_state);
      break; 
  }
  return $form;     
}


//membership selection page
function bei_recurly_checkout_membership_form($form, &$form_state, $active_plans, $subscription_node) {  
  $values = isset($form_state['multistep_values']['membership']) ? $form_state['multistep_values']['membership'] : array(); 

  //get the current plan options that match the URL
  $plan_options = array();
  foreach($active_plans as $plan_code => $plan) {
    //$plan_options[$plan_code] = $plan->name;
    $plan_values = $plan->getValues();
    $setup_fee = !empty($plan_values['setup_fee_in_cents']) ? $plan_values['setup_fee_in_cents']->getCurrency('USD')->amount_in_cents : 0;
    $unit_amount = $plan_values['unit_amount_in_cents']->getCurrency('USD')->amount_in_cents; 
    $total_cost = '$' . number_format((($setup_fee + $unit_amount) /100), 2, '.', ',');
    if ($plan_values['plan_interval_length'] == '12') {
      $plan_interval_unit = 'year';
      $total_billing_cycles = '';
    }
    else {
      $plan_interval_unit = 'month';
      $total_billing_cycles = '<span class="plan-duration">for 12 months</span>';
    }
    $plan_description = !empty($plan_values['description']) ? '<span class="plan-description">' . $plan_values['description'] . '</span>' : '';
    $plan_options[$plan_code] = '<span class="plan-cost">' . $total_cost . '</span><span class="plan-interval">/' . $plan_interval_unit . '</span>' . $total_billing_cycles . $plan_description;
    //$plan contains other metadata such as price, duration, etc
  }
  $plan_name = 'Membership';
  $brief_description = '';
  if (!empty($subscription_node)) {
    $plan_name = $subscription_node->title;
    $brief_description_field = field_get_items('node', $subscription_node, 'field_brief_description');
    $brief_description = $brief_description_field ? '<p>' . $brief_description_field[0]['value'] . '</p>' : '';
  }
  $form['membership']['plan_name'] = array(
    '#type' => 'hidden',
    '#value' => $plan_name,
  );
  $form['membership']['intro'] = array(
    '#type' => 'item',
    '#title' => t(''),
    '#markup' => t('<h2>' . $plan_name . '</h2>' . $brief_description),
  );
  $form['membership']['plan'] = array(
    '#type' => 'radios',
    '#title' => 'Select your billing preference:',
    '#options' => $plan_options,
    '#default_value' => isset($values['plan']) ? $values['plan'] : '',
  );
  $form['membership']['outro'] = array(
    '#type' => 'item',
    '#title' => t(''),
    '#markup' => t("All memberships are automatically renewed at the end of a one-year period. For group pricing on multiple memberships, please call a Member Services Consultant at (888) 206-3009."),
  );
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Get Your Membership Today!')
  );  
  return $form;
}

function bei_recurly_checkout_membership_validate($form, &$form_state) {
  bei_recurly_load_recurly_library();

  try {
    $plan = Recurly_Plan::get($form_state['values']['plan']);
    $plan_values = $plan->getValues();
    $setup_fee = !empty($plan_values['setup_fee_in_cents']) ? $plan_values['setup_fee_in_cents']->getCurrency('USD')->amount_in_cents : 0; 
    $unit_amount = $plan_values['unit_amount_in_cents']->getCurrency('USD')->amount_in_cents; 
    $total_cost = $setup_fee + $unit_amount;
    $form_state['values']['plan_interval'] = ($plan_values['plan_interval_length'] == '12') ? 'year': 'month';
    $form_state['values']['plan_description'] = !empty($plan_values['description']) ? "<br />Description: ".$plan_values['description'] : '';
    $form_state['values']['plan_cost'] = $total_cost;
    $form_state['values']['unit_amount'] = $unit_amount;
  }
  catch (Recurly_NotFoundError $e) {
    form_set_error('plan', 'Invalid Plan');   
  }
}

//contact information page
function bei_recurly_checkout_contact_form($form, &$form_state) {
  spambot_add_form_protection($form,
    array(
      'mail' => 'email',
      'name' => 'email',
      'ip' => TRUE
    )
  );
  $values = isset($form_state['multistep_values']['contact']) ? $form_state['multistep_values']['contact'] : array(); 

  global $user;
  if (isset($values['email'])) {
          $default_email = $values['email'];
  } elseif (!empty($user->mail)) {
          $default_email = $user->mail;
  } else {
          $default_email = '';
  }

  $first_name = '';
  $last_name = '';
  $company_name = '';
  $phone_num = '';
  $logged_in = FALSE;
  if (isset($user->uid) && $user->uid != 0) {
    $logged_in = TRUE;
    $user_object = user_load($user->uid);
    $first_name = (isset($user_object->field_first_name[LANGUAGE_NONE][0]['value'])) ? $user_object->field_first_name[LANGUAGE_NONE][0]['value'] : '';
    $last_name = (isset($user_object->field_last_name[LANGUAGE_NONE][0]['value'])) ? $user_object->field_last_name[LANGUAGE_NONE][0]['value'] : '';
    $company_name = (isset($user_object->field_company_name[LANGUAGE_NONE][0]['value'])) ? $user_object->field_company_name[LANGUAGE_NONE][0]['value'] : '';
    $phone_num = (isset($user_object->field_phone[LANGUAGE_NONE][0]['value'])) ? $user_object->field_phone[LANGUAGE_NONE][0]['value'] : '';
  }

  if ($logged_in) {
    $form['contact']['login'] = array(
      '#type' => 'item',
      '#title' => t(''),
      '#markup' =>  t("You're already logged in, please verify or update your information below."),
      '#prefix' => '<div class="checkout-main-content">',
    );
  }
  else {
    $form['contact']['login'] = array(
      '#type' => 'item',
      '#title' => t(''),
      '#markup' =>  t('Enter the information below to set up your account. <br />Already have an account? ').
              l('Login here','/user/login',array('query' => array('r-destination'=>	current_path()))),
      '#prefix' => '<div class="checkout-main-content">',
    );
  }
  $form['contact']['first'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name:'),
    '#default_value' => isset($values['first']) ? $values['first'] : $first_name,
  );
  $form['contact']['last'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name:'),
    '#default_value' => isset($values['last']) ? $values['last'] : $last_name,
  );
  $form['contact']['company'] = array(
    '#type' => 'textfield',
    '#title' => t('Company:'),
    '#default_value' => isset($values['company']) ? $values['company'] : $company_name,
  );
  $form['contact']['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Number:'),
    '#default_value' => isset($values['phone']) ? $values['phone'] : $phone_num,
    '#description' => t("We promise we'll never sell or share your number."),
  );
  if ($logged_in) {
    $form['contact']['email'] = array(
      '#type' => 'hidden',
      '#title' => t('Email Address:'),
      '#default_value' => $default_email,
      '#description' => t('Looks good! Use this email address to login to your account.'),
    ); 
    $form_state['extra_info']['logged_in_uid'] = $user->uid;
  }
  else {
    $form['contact']['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email Address:'),
      '#default_value' => $default_email,
      '#description' => t('Looks good! Use this email address to login to your account.'),
    ); 
    $form['contact']['pass'] = array(
      '#type' => 'password_confirm', 
      '#size' => 25,
    );
  }
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => t('Back')
  );
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Continue to Billing Details'),
    '#suffix' => '</div>',
  );     
  $form['#validate'][] = 'bei_recurly_checkout_form_validate';
  return $form;
}
function bei_recurly_checkout_contact_validate($form, &$form_state) {
  bei_recurly_load_recurly_library();
  $first_name = check_plain($form_state['values']['first']);
  $last_name = check_plain($form_state['values']['last']);
  $company = check_plain($form_state['values']['company']);
  $email = check_plain($form_state['values']['email']);
  $password = !empty($form_state['values']['pass']) ? $form_state['values']['pass'] : user_password(8);
  
  //check for existing drupal account
  $account = user_load_by_mail($email);
  $save_account = FALSE;
  if ($account) {
    //update some fields on the user
    $account->field_first_name[LANGUAGE_NONE][0]['value'] = check_plain($form_state['values']['first']);
    $account->field_last_name[LANGUAGE_NONE][0]['value'] = check_plain($form_state['values']['last']);
    $account->field_company_name[LANGUAGE_NONE][0]['value'] = check_plain($form_state['values']['company']);
    $account->field_phone[LANGUAGE_NONE][0]['value'] = check_plain($form_state['values']['phone']);
    user_save($account);

    try {
      $subscriptions = Recurly_SubscriptionList::getForAccount($account->uid);
      foreach ($subscriptions as $subscription) {
        //already has a subscription
        drupal_set_message("Looks like you already have a subscription. You can manage your subscription here.",'status');
        drupal_goto("user/$account->uid/edit");
        break;
      }
    }
    catch (Recurly_NotFoundError $e) {
      //doesn't yet have a subscription
      //drupal_goto('user/login', array('query' => array(drupal_get_destination(), "param1" => "something", "param2" => "somethingelse")));
    }
  }
  else {
    //no account, create it now
    //set up the user fields
    $fields = array(
      'name' => $email,
      'mail' => $email,
      'pass' => $password,
      'status' => 1,
      'init' => $email,
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
      'field_first_name' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $first_name,
          ),
        ),
      ),
      'field_last_name' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $last_name,
          ),
        ),
      ),
      'field_company_name' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $company,
          ),
        ),
      ),
      'field_phone' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => check_plain($form_state['values']['phone']),
          ),
        ),
      ),
    );
    $account = user_save('', $fields);
    $save_account = TRUE;
  }
  $form_state['values']['uid'] = $account->uid;
  //check for existing recurly acount or create one
  try {
    $recurly_account = Recurly_Account::get($account->uid);
  }
  catch (Recurly_NotFoundError $e) {
    try {
      //create new account
      $recurly_account = new Recurly_Account();
      $recurly_account->account_code = $account->uid;
      $recurly_account->email = $email;
      $recurly_account->first_name = $first_name;
      $recurly_account->last_name = $last_name;
      $recurly_account->company_name = $company;
      $recurly_account->create();
    }
    catch (Recurly_ValidationError $e) {
      form_set_error('form', $e->getMessage());
      return;
    }
  }
}

//billing details page
function bei_recurly_checkout_billing_form($form, &$form_state) {   
  $values = isset($form_state['multistep_values']['billing']) ? $form_state['multistep_values']['billing'] : array(); 

  //do a bunch of coupon stuff from ajax apply button
  if (isset($form_state['triggering_element']['#ajax']['callback']) && $form_state['triggering_element']['#ajax']['callback'] = 'ajax_apply_coupon' && empty($form_state['extra_info']['ajax_error_array'])) {
    bei_recurly_load_recurly_library();
    $valid_coupon = TRUE;
    $form_state['extra_info']['coupon_description'] = '';
    $code = check_plain($form_state['input']['coupon_code']);
    try {
      $coupon = Recurly_Coupon::get($code);
      $coupon_values = $coupon->getValues();
      $form_state['extra_info']['coupon_description'] = (isset($coupon_values['description'])) ? $coupon_values['description'] : ''; 
    }
    catch (Recurly_NotFoundError $e) {
      $valid_coupon = FALSE;
      $form_state['extra_info']['coupon_error'] = 'Invalid coupon code.';
    }
    //because we don't have to have to collect billing info before needed to check coupon code
    if ($valid_coupon) {
      $uid = $form_state['multistep_values']['contact']['uid'];
      try {
        $account = Recurly_Account::get($uid);
      }
      catch (Recurly_NotFoundError $e) {
      }
      try {
        $subscription = new Recurly_Subscription();
        $subscription->plan_code = $form_state['multistep_values']['membership']['plan'];
        $subscription->currency = 'USD';
        $subscription->coupon_code = $code;
        $subscription->account = $account;
        $subscription->preview();

        //dig way deep into the subscription object to find if there are any discounts applied
        $values = $subscription->getValues();
        $invoice_values = $values['invoice']->getValues();
        foreach($invoice_values['line_items'] as $line_item) {
          $li_values = $line_item->getValues();
          if (isset($li_values['discount_in_cents']) && $li_values['discount_in_cents'] > 0) {
            $unit_amount_in_cents = $li_values['unit_amount_in_cents'];
            $discount_in_cents = $li_values['discount_in_cents'];
            $total_in_cents = $li_values['total_in_cents'];
            $discount_plan_code = $form_state['multistep_values']['membership']['plan'];
            break;
          }
        }
      }
      catch (Recurly_ValidationError $e) {
        //some error
        watchdog('recurly-error,',$e);
        $form_state['extra_info']['coupon_error'] = $e->getMessage();
      }
    }
  }
  else {
    //empty coupon code
    $form_state['extra_info']['coupon_error'] = "No coupon code entered.";
  }
  if (!isset($discount_in_cents) && !empty($form_state['extra_info']['discount_in_cents'])) {
    $discount_in_cents = $form_state['extra_info']['discount_in_cents'];
    $unit_amount_in_cents = $form_state['extra_info']['unit_amount_in_cents'];
    $total_in_cents = $form_state['extra_info']['total_in_cents'];
    $code = $form_state['extra_info']['valid_coupon_code'];
    $discount_plan_code = $form_state['multistep_values']['membership']['plan'];
  }
  if (isset($discount_in_cents)) {
    unset($form_state['extra_info']['coupon_error']);
    $form_state['extra_info']['unit_amount_in_cents'] = $unit_amount_in_cents;
    $form_state['extra_info']['discount_in_cents'] = $discount_in_cents;
    $form_state['extra_info']['total_in_cents'] = $total_in_cents;
    $form_state['extra_info']['valid_coupon_code'] = $code;
    $form_state['extra_info']['discount_plan_code'] = $discount_plan_code;
  }
  else {
    $form_state['extra_info']['unit_amount_in_cents'] = '';
    $form_state['extra_info']['discount_in_cents'] = '';
    $form_state['extra_info']['total_in_cents'] = '';
    $form_state['extra_info']['valid_coupon_code'] = '';
  }
  $form['billing']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name:'),
    '#default_value' => isset($values['name']) ? $values['name'] : '',
    '#prefix' => '<div class="checkout-main-content">',
  );
  $form['billing']['address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Billing Address:'),
    '#default_value' => isset($values['address1']) ? $values['address1'] : '',
  );   
  $form['billing']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City:'),
    '#size' => 15,
    '#default_value' => isset($values['city']) ? $values['city'] : '',
  );
  $form['billing']['state'] = array(
    '#type' => 'select',
    '#title' => t('State:'),
    '#options' => bei_recurly_state_list(),
    '#default_value' => isset($values['state']) ? $values['state'] : 'AL',
  );
  $form['billing']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code:'),
    '#size' => 5,
    '#default_value' => isset($values['zip']) ? $values['zip'] : '',
  );
  $form['billing']['payment_type'] = array(
    '#type' => 'radios',
    '#title' => t('Payment Options:'),
    '#default_value' => isset($values['payment_type']) ? $values['payment_type'] : '0',
    '#options' => array(0 => t('Credit Card'), 1 => t('Bank Account')),
  );
  $form['billing']['cc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(   // action to take.
        ':input[name="payment_type"]' => array('value' => '0'),
      ),
    ),
  );
  $form['billing']['cc']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Number:'),
    '#default_value' => '',
    '#size' => 20,
    '#attributes' => array(
      'class' => array('ccFormatMonitor'),
    ),
  );
  $form['billing']['cc']['month'] = array(
    '#type' => 'select',
    '#title' => t('Expiration Date:'),
    '#default_value' => isset($values['month']) ? $values['month'] : '1',
    '#options' => array(
      1 => t('Jan'),
      2 => t('Feb'),
      3 => t('Mar'),
      4 => t('Apr'),
      5 => t('May'),
      6 => t('Jun'),
      7 => t('Jul'),
      8 => t('Aug'),
      9 => t('Sep'),
      10 => t('Oct'),
      11 => t('Nov'),
      12 => t('Dec'),
    ),
  );
  $years_array = range(date('Y'), date('Y')+10);
  foreach($years_array as $key => $val) {
    $years[$val]=$val;
  }
  $form['billing']['cc']['year'] = array(
    '#type' => 'select',
    '#title' => t('Year'),
    '#default_value' => isset($values['year']) ? $values['year'] : '',
    '#options' => $years,
  );
  $form['billing']['cc']['verification_value'] = array(
    '#type' => 'textfield',
    '#title' => 'CVV:',
    '#size' => 4,
    '#default_value' => isset($values['verification_value']) ? $values['verification_value'] : '',
  );
  
  //bank account
  $form['billing']['bank'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bank Information'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(   // action to take.
        ':input[name="payment_type"]' => array('value' => '1'),
      ),
    ),
  );
  $form['billing']['bank']['graphic'] = array(
    '#type' => 'item',
    '#markup' => "<img src='/".drupal_get_path('module', 'bei_recurly')."/images/Check.png' alt='' />",
  );
  $form['billing']['bank']['account_type'] = array(
    '#type' => 'select',
    '#title' => t('Account Type:'),
    '#options' => array(
      'checking' => t('Checking'),
      'savings' => t('Savings'),
    ),
    '#default_value' => isset($values['account_type']) ? $values['account_type'] : 'checking',
  );
  $form['billing']['bank']['routing_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Routing Number:'),
    '#default_value' => isset($values['routing_number']) ? $values['routing_number'] : '',
  );
  $form['billing']['bank']['account_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Account Number:'),
    '#default_value' => isset($values['account_number']) ? $values['account_number'] : '',
  );
  $form['billing']['coupon'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('clearfix')),
  );
  $form['billing']['coupon']['coupon_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon Code:'),
    '#default_value' => isset($values['coupon_code']) ? $values['coupon_code'] : '',
  );
  $form['billing']['coupon']['coupon_apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
    '#ajax' => array(
      'callback' => 'ajax_apply_coupon',
      'wrapper' => 'cfs-assignment-field',
      'method' => 'replace',
    ),
    '#prefix' => '<span id="coupon-apply">',
    '#suffix' => '</span>',
  );
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => t('Back'),
  );
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Review & Finish Checkout'),
    '#suffix' => '</div>',
  );
  return $form;
}
function bei_recurly_checkout_billing_validate($form, &$form_state) {
  //validate card data
  bei_recurly_load_recurly_library();
  $billing_info = array();
  try {
    $billing_info = new Recurly_BillingInfo();
    $billing_info->account_code = $form_state['multistep_values']['contact']['uid'];
    if ($form_state['values']['payment_type'] == 0) {
      $billing_info->first_name = strtok($form_state['values']['name'], ' ');
      $billing_info->last_name = substr($form_state['values']['name'], strrpos($form_state['values']['name'], ' ') + 1);
      $billing_info->number = $form_state['values']['number'];
      $billing_info->verification_value = $form_state['values']['verification_value'];
      $billing_info->month = $form_state['values']['month'];
      $billing_info->year = $form_state['values']['year'];
    }
    else {
      $billing_info->name_on_account = $form_state['values']['name'];
      $billing_info->routing_number = $form_state['values']['routing_number'];
      $billing_info->account_number = $form_state['values']['account_number'];
      $billing_info->account_type = $form_state['values']['account_type'];
    }
    $billing_info->address1 = $form_state['values']['address1'];
    $billing_info->city = $form_state['values']['city'];
    $billing_info->state = $form_state['values']['state'];
    $billing_info->country = 'US';
    $billing_info->zip = $form_state['values']['zip'];
    $billing_info->create();
  }
  catch (Recurly_ValidationError $e) {
    // The data or card are invalid
    form_set_error('form',$e->getMessage());
    $error_field = 'form';
    //set proper error highlighting on fields
    if (isset($e->errors[0]->field)) { 
      $error_fields = $e->errors; 
      foreach($error_fields as $error) {
        if ($error->symbol == 'expired') {
          form_set_error('year','');
        }
        else {
          form_set_error($error->field,'');
        }
      }
    }
    form_set_error($error_field,$e->getMessage());
  }
  catch (Recurly_NotFoundError $e) {
    // Could not find account
  }
  $form_state['extra_info']['ajax_error_array'] = '';
  //want some special handling for coupon code apply
  //catch all errors, so we can present them below the coupon code area - rather than redraw the whole form
  if (isset($form_state['triggering_element']['#ajax']['callback']) && $form_state['triggering_element']['#ajax']['callback'] = 'ajax_apply_coupon') {
    $errors = form_get_errors();
    if ($errors) {
      array_unshift($errors,'In order to calculate your discount:');
      $form_state['extra_info']['ajax_error_array'] = $errors;
      // Clear errors.
      drupal_get_messages('error');
      return;
    }
  }
}

//membership selection page
function bei_recurly_checkout_review_form($form, &$form_state) {     
  $values = isset($form_state['multistep_values']['review']) ? $form_state['multistep_values']['review'] : array(); 	
  $form['review']['header'] = array(
    '#type' => 'item',
    '#markup' =>'<div class="review-header">'.t('Review the information below and finish checking out').'</div>'
  );
  $form['review']['type'] = array(
    '#type' => 'item',
    '#markup' =>'<div class="review-label">'.t('Membership Type:').'</div>'.
    '<div class="review-value">'."<a href='javascript:history.back()'>".t($form_state['multistep_values']['membership']['plan_name']).'</a></div>'
  ); 
  $form['review']['interval'] = array(
    '#type' => 'item',
    '#markup' =>'<div class="review-label">'.t('Billing Preference:').'</div>'.
    '<div class="review-value">'."<a href='javascript:history.back()'>".ucfirst(t($form_state['multistep_values']['membership']['plan_interval'])).'ly</a></div>'
  );
  $form['review']['name'] = array(
    '#type' => 'item',
    '#markup' =>'<div class="review-label">'.t('Billing Name:').'</div>'.
    '<div class="review-value">'."<a href='javascript:history.back()'>".t($form_state['multistep_values']['billing']['name']).'</a></div>'
  );
  $form['review']['address'] = array(
    '#type' => 'item',
    '#markup' =>'<div class="review-label">'.t('Billing Address:').'</div>'.
    '<div class="review-value">'."<a href='javascript:history.back()'>".t($form_state['multistep_values']['billing']['address1']).'</a></div>'
  );
  $form['review']['city'] = array(
    '#type' => 'item',
    '#markup' =>'<div class="review-label">'.t('Billing City:').'</div>'.
    '<div class="review-value">'."<a href='javascript:history.back()'>".t($form_state['multistep_values']['billing']['city']).'</a></div>'
  );
  $form['review']['state'] = array(
    '#type' => 'item',
    '#markup' =>'<div class="review-label">'.t('Billing State:').'</div>'.
    '<div class="review-value">'."<a href='javascript:history.back()'>".t($form_state['multistep_values']['billing']['state']).'</a></div>'
  );
  $form['review']['zip'] = array(
    '#type' => 'item',
    '#markup' =>'<div class="review-label">'.t('Billing Zip:').'</div>'.
    '<div class="review-value">'."<a href='javascript:history.back()'>".t($form_state['multistep_values']['billing']['zip']).'</a></div>'
  );
  if ($form_state['multistep_values']['billing']['payment_type'] == 0) {
    //credit card
    $card_number = $form_state['multistep_values']['billing']['number'];
    $private_card_number = str_repeat('*', strlen($card_number) - 4) . substr($card_number, -4);
    $form['review']['number'] = array(
      '#type' => 'item',
      '#markup' =>'<div class="review-label">' . t('Card Number:') . '</div>'.
      '<div class="review-value">' . "<a href='javascript:history.back()'>" . $private_card_number . '</a></div>'
    );
    $form['review']['expiration'] = array(
      '#type' => 'item',
      '#markup' =>'<div class="review-label">' . t('Card Expiration:') . '</div>'.
      '<div class="review-value">' . "<a href='javascript:history.back()'>" . t($form_state['multistep_values']['billing']['month']) . ' ' . $form_state['multistep_values']['billing']['year'] . '</a></div>'
    );
  }
  else {
    //bank account
    $form['review']['account_type'] = array(
      '#type' => 'item',
      '#markup' =>'<div class="review-label">'.t('Account Type:').'</div>'.
      '<div class="review-value">' . "<a href='javascript:history.back()'>" . t($form_state['multistep_values']['billing']['account_type']) . '</a></div>'
    );
    $form['review']['routing_number'] = array(
      '#type' => 'item',
      '#markup' =>'<div class="review-label">'.t('Routing Number:').'</div>'.
      '<div class="review-value">'."<a href='javascript:history.back()'>" . t($form_state['multistep_values']['billing']['routing_number']) . '</a></div>'
    );
    $form['review']['account_number'] = array(
      '#type' => 'item',
      '#markup' =>'<div class="review-label">'.t('Account Number:').'</div>'.
      '<div class="review-value">'."<a href='javascript:history.back()'>" . t($form_state['multistep_values']['billing']['account_number']) . '</a></div>'
    );
  }
  $form['review']['terms'] = array(
    '#type' => 'checkbox',
    '#title' => t('I agree to BEI Exit Planning Solutions ') . l(t('Terms & Conditions.'),'terms-use', array('attributes' => array('target'=>'_blank'))),
  ); 
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => t('Back')
  );
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Purchase Membership')
  ); 
  return $form;
}

function bei_recurly_checkout_review_validate($form, &$form_state) {
  drupal_get_messages('error');
  if (isset($form_state['values']['terms']) && $form_state['values']['terms'] != '1') {
    form_set_error('terms', 'You must accept our Terms & Conditions in order to complete your purchase.');
  }
}

//membership selection page
function bei_recurly_checkout_thanks_form($form, &$form_state) {     
  $form['thanks']['text'] = array(
    '#type' => 'item',
    '#markup' => "<div class='order-number'>".t("Order No: #").$form_state['multistep_values']['review']['invoice_number']."</div>".
    "<div class='order-text'><p>".t('You will receive an email shortly with the details of your order. We encourage all of our new members to explore the Member Center and all of its benefits. Please contact us if you have any questions.')."</p></div>"
  );  
  if (isset($form_state['extra_info']['logged_in_uid'])) {
    $form['thanks']['link'] = array(
            '#type' => 'item',
            '#markup' => l(t('Complete your member profile'),"user/".$form_state['extra_info']['logged_in_uid']."/edit", array('attributes' => array('class' => array('button','large')))),
    );
  }
  else {
    $form['thanks']['link'] = array(
      '#type' => 'item',
      '#markup' => l(t('Login and complete your member profile'),'user/login', array('attributes' => array('class' => array('button','large')), 'query' => array("destination" => "user/".$form_state['multistep_values']['contact']['uid']."/edit"))),
    );
  }
  return $form;
}

function bei_recurly_checkout_form_validate($form, &$form_state) {    
  if (isset($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#value'] == 'Back') {
    return;
  }  
  if (isset($form_state['triggering_element']['#name']) && array_key_exists($form_state['triggering_element']['#name'], $form_state['form_stages'])) {
    return;
  }

  $errors = FALSE;
  $ignored_fields = array('terms','coupon_code');
  
  //conditional handling for billing page
  if (isset($form_state['stage']) && $form_state['stage'] == 'billing') {
    if ($form_state['values']['payment_type'] == 0) {
      array_push($ignored_fields,'routing_number','account_number');
    }
    else {
      array_push($ignored_fields,'number','verification_value');
    }
  }

  //generic setting of errors for empty form fields
  if (isset($form_state['values'])) {
    foreach($form_state['values'] as $form_field => $form_value) {
      if (empty($form_value) && $form_value !== '0' && !in_array($form_field, $ignored_fields)) {
        $stage = $form_state['stage'];
        $field_title = isset($form[$stage][$form_field]['#title']) ? $form[$stage][$form_field]['#title'] : $form_field;
        form_set_error($form_field, 'Please enter a value for "'.$field_title.'"');
        $errors = TRUE;
      }
    }
  }
  if ($errors) { 
    if (isset($form_state['triggering_element']['#ajax']['callback']) && $form_state['triggering_element']['#ajax']['callback'] = 'ajax_apply_coupon') {
      //ajax errors
    }
    else {
      return; 
    }
  }
  switch ($form_state['stage']) {        
    case 'membership':
      return bei_recurly_checkout_membership_validate($form, $form_state);
      break;  
    case 'contact': 
      return bei_recurly_checkout_contact_validate($form, $form_state);  
      break;
    case 'billing': 
      return bei_recurly_checkout_billing_validate($form, $form_state);  
      break;
    case 'review': 
      return bei_recurly_checkout_review_validate($form, $form_state);  
      break;
  }
}

function bei_recurly_checkout_form_submit($form, &$form_state) {   
  switch ($form_state['stage']) {     
    case 'membership':
      $form_state['multistep_values'][$form_state['stage']] = $form_state['values'];
      $form_state['new_stage'] = bei_recurly_checkout_move_to_next_stage($form, $form_state);
      //set price for selected membership
      break;
    case 'review':
      $form_state['multistep_values'][$form_state['stage']] = $form_state['values'];
      if ($form_state['triggering_element']['#value'] != 'Back') {
        $form_state['complete'] = TRUE;
        bei_recurly_checkout_review_submit($form, $form_state);
        $form_state['new_stage'] = bei_recurly_checkout_move_to_next_stage($form, $form_state);
      }
      break;  
    default:
      $form_state['multistep_values'][$form_state['stage']] = $form_state['values'];
      $form_state['new_stage'] = bei_recurly_checkout_move_to_next_stage($form, $form_state);
      break;  
  } 
  if (isset($form_state['triggering_element']['#name']) && array_key_exists($form_state['triggering_element']['#name'], $form_state['form_stages'])) {
    $form_state['new_stage'] = $form_state['triggering_element']['#name'];
  }
  if ($form_state['triggering_element']['#value'] == 'Back') {
    $form_state['new_stage'] = bei_recurly_checkout_move_to_previous_stage($form, $form_state);
  }
   
  if (isset($form_state['multistep_values']['form_build_id'])) {
    $form_state['values']['form_build_id'] = $form_state['multistep_values']['form_build_id'];
  }
  $form_state['multistep_values']['form_build_id'] = $form_state['values']['form_build_id'];
  //don't want to set new stage on ajax coupon call
  if (isset($form_state['triggering_element']['#ajax']['callback']) && $form_state['triggering_element']['#ajax']['callback'] = 'ajax_apply_coupon') {
  
  }
  else {
    $form_state['stage'] = $form_state['new_stage'];
  }
  //clear coupon stuff if plan changes
  if (!empty($form_state['multistep_values']['membership']['plan']) && !empty($form_state['extra_info']['discount_plan_code']) && $form_state['multistep_values']['membership']['plan'] != $form_state['extra_info']['discount_plan_code']) {
    unset($form_state['extra_info']);
  }
  $form_state['rebuild'] = TRUE;     
}
function bei_recurly_checkout_review_submit($form, &$form_state) {
  bei_recurly_load_recurly_library();

  $first_name = check_plain($form_state['multistep_values']['contact']['first']);
  $last_name = check_plain($form_state['multistep_values']['contact']['last']);
  $email = check_plain($form_state['multistep_values']['contact']['email']);
  $company = check_plain($form_state['multistep_values']['contact']['company']);
  $uid = $form_state['multistep_values']['contact']['uid'];
  //legal terms stuff
  $entity_legal_document = entity_load_single(ENTITY_LEGAL_DOCUMENT_ENTITY_NAME, 'membership_terms_conditions');
  $published_version = $entity_legal_document->getPublishedVersion();
  $acceptance = entity_create(ENTITY_LEGAL_DOCUMENT_ACCEPTANCE_ENTITY_NAME, array(
    'uid' => $uid,
    'document_version_name' => $published_version->identifier(),
  ));
  $acceptance->save();
  $account = user_load($uid);
  //check for existing recurly acount or create one
  try {
    $recurly_account = Recurly_Account::get($account->uid);
  }
  catch (Recurly_NotFoundError $e) {
    //create new account
    $recurly_account = new Recurly_Account();
    $recurly_account->account_code = $account->uid;
    $recurly_account->email = $email;
    $recurly_account->first_name = $first_name;
    $recurly_account->last_name = $last_name;
    $recurly_account->company_name = $company;
    $recurly_account->create();
  }

  $date = date_create();
  date_add($date, date_interval_create_from_date_string('10 months'));
  //create subscription
  $recurly_subscription = new Recurly_Subscription();
  $recurly_subscription->plan_code = $form_state['multistep_values']['membership']['plan'];
  $recurly_subscription->currency = 'USD';
  if (!empty($form_state['extra_info']['valid_coupon_code'])) {
    $recurly_subscription->coupon_code = $form_state['extra_info']['valid_coupon_code'];
  }
  $recurly_subscription->account = $recurly_account;
  $recurly_subscription->create();
  $values = $recurly_subscription->getValues();
  foreach($values as $val_name => $value) {
    if ($val_name == 'invoice') {
      $invoice = $value->get();
      $invoice_number = $invoice->invoiceNumberWithPrefix();
      $form_state['multistep_values']['review']['invoice_number'] = $invoice_number;
    }
  }
  $form_state['new_stage'] = bei_recurly_checkout_move_to_next_stage($form, $form_state);
}

function bei_recurly_checkout_get_header($form, &$form_state) {   
  $form_state['stage'] = isset($form_state['stage']) ? $form_state['stage'] : 1;       
  $form_stages = array(
    'membership' => 1,
    'contact' => 2,
    'billing' => 3,
    'review' => 4,
    'thanks' => 5,
  );     
  $form_state['form_stages'] = $form_stages;
  if (isset($form_stages[$form_state['stage']])) {
    $current_stage = $form_state['stage'];
    $current_step = $form_stages[$form_state['stage']]; 
  }
  else {
    $current_step = 1;
    $current_stage = 'membership';
  }
   
  $stages = array(
    1 => array('data' => '1. Select Membership', 'title' => ''),
    2 => array('data' => '2. Contact Information', 'title' => 'Contact Information'),
    3 => array('data' => '3. Billing Information', 'title' => 'Billing Information'),
    4 => array('data' => '4. Review & Finish', 'title' => "You're almost done!"),
    5 => array('data' => '', 'title' => "Thanks for becoming a BEI Exit Planning Member!"),
  );
  //this holds our data for linking the steps at the top
  $steps = array(
    1 => array('data' => '1. Select Membership', 'title' => '', 'link' => 'membership'),
    2 => array('data' => '2. Contact Information', 'title' => 'Contact Information', 'link' => 'contact'),
    3 => array('data' => '3. Billing Information', 'title' => 'Billing Information', 'link' => 'billing'),
    4 => array('data' => '4. Review & Finish', 'title' => "You're almost done!", 'link' => 'review'),
    5 => array('data' => '', 'title' => "Thanks for becoming a BEI Exit Planning Member!", 'link' => 'thanks'),
  );
  //loop through steps to conditionally make links, etc.
  if ($current_step !== 5) {
    $stop_links = FALSE;
    $class = '';
    $link = '';
    $form['steps_open'] = array(
      '#type' => 'item',
      '#markup' => "",
      '#prefix' => "<div class='membership-steps-wrepper'>",
    );
    foreach($steps as $s_id => $s_val) {
      $link = $s_val['link'];
      if ($s_id == $current_step) {
        $stop_links = TRUE;
        $class = 'active';
      }

      if (!$stop_links && $link != 'thanks') {
        $form['steps'][$link] = array(
          '#type' => 'submit',
          '#name' => $link,
          '#value' => t($s_val['data'])
        );
      }
      elseif ($stop_links && $link != 'thanks') {
        $form['steps'][$link] = array(
          '#type' => 'item',
          '#markup' => "<span class=$class>".t($s_val['data'])."</span>"
        );
      }
      $class = '';
    }
    $form['steps_close'] = array(
      '#type' => 'item',
      '#markup' => "",
      '#suffix' => "</div>",
    );
  }
  $form['title'] = array(
    '#type' => 'item',
    '#markup' => t('<h2>' . $stages[$current_step]['title'] . '</h2>')
  );
  if ($current_step !== 1 && $current_step !== 5) {
    $plan_interval = '';
    if (!empty($form_state['multistep_values']['membership']['plan_interval'])) {
      $plan_interval = '/' . $form_state['multistep_values']['membership']['plan_interval'];
    }
    if (!empty($form_state['extra_info']['discount_in_cents'])) {
      $membership_cost_markup = 
      "<div class='membership-cost'><span>Membership Cost:</span> <span class='cost-amount'>$".number_format(($form_state['multistep_values']['membership']['plan_cost'] /100), 2, '.', ',')."$plan_interval</span></div>
      <div class='discount'><span>Discount:</span> <span class='cost-amount'>($".number_format(($form_state['extra_info']['discount_in_cents'] /100), 2, '.', ',').")</span></div>
      <div class='total-cost'><span>Total:</span> <span class='cost-amount'>$".number_format(($form_state['extra_info']['total_in_cents'] /100), 2, '.', ',')."</span></div>";
    }
    else {
      $membership_cost_markup = "<div class='membership-cost'><span>Membership Cost:</span> <span class='cost-amount'>$".number_format(($form_state['multistep_values']['membership']['plan_cost'] /100), 2, '.', ',')."$plan_interval</span></div>
      <div class='total-cost'><span>Total:</span> <span class='cost-amount'>$".number_format(($form_state['multistep_values']['membership']['plan_cost'] /100), 2, '.', ',')."</span></div>";
    }
    $form['plan_details'] = array(
      '#type' => 'item',
      '#title' => t(''),
      '#markup' =>  "<div id='plan-info-wrap'><div class='plan-info-title'>" . t($form_state['multistep_values']['membership']['plan_name']) . "</div>".
      "<div id='persistent-plan-price-display-wrap'>$membership_cost_markup</div></div>",
      '#prefix' => '<div class="checkout-right-rail">',
      '#suffix' => '</div>',
    );
  }
  return $form;   
}

function bei_recurly_checkout_move_to_next_stage($form, &$form_state) { 
  switch ($form_state['stage']) {
    case 'membership':
      return 'contact';
      break; 
    case 'contact':
      return 'billing';
      break; 
    case 'billing':
      return 'review';
      break;
    case 'review':
      return 'thanks';
      break;
  } 
} 
function bei_recurly_checkout_move_to_previous_stage($form, &$form_state) { 
  switch ($form_state['stage']) {
    case 'review':
      return 'billing';
      break; 
    case 'billing':
      return 'contact';
      break;
    case 'contact':
      return 'membership';
      break;
  }
}

function ajax_apply_coupon($form,&$form_state) {
  $form_state['rebuild'] = TRUE;

  $commands = array();
  //check for errors to present
  if (!empty($form_state['extra_info']['ajax_error_array'])) {
    $errors = '';
    foreach($form_state['extra_info']['ajax_error_array'] as $error) {
      $errors .= $error.'<br />';
    }
    $commands[] = ajax_command_replace('#plan-price-display-wrap', "<div id='plan-price-display-wrap'><div class='coupon-error'>".$errors."</div></div>");
  }
  elseif (!empty($form_state['extra_info']['discount_in_cents'])) {
    $coupon_description = (!empty($form_state['extra_info']['coupon_description'])) ? "<div>".$form_state['extra_info']['coupon_description']."</div>" : '';
    //if discount was properly applied, change some display
    $replacement_markup = "<div class='membership-cost'><span>Membership Cost:</span> <span class='cost-amount'>$" . number_format(($form_state['extra_info']['unit_amount_in_cents'] /100), 2, '.', ',') . "</span></div>
    <div class='discount'><span>Discount:</span> <span class='cost-amount'>($" . number_format(($form_state['extra_info']['discount_in_cents'] /100), 2, '.', ',') . ")</span></div>
    <div class='total-cost'><span>Total Cost:</span> <span class='cost-amount'>$" . number_format(($form_state['extra_info']['total_in_cents'] /100), 2, '.', ',') . "</span></div>";
    $commands[] = ajax_command_replace('#plan-price-display-wrap', "<div id='plan-price-display-wrap' class='coupon-applied'>$coupon_description$replacement_markup</div>");
    $commands[] = ajax_command_replace('#persistent-plan-price-display-wrap', "<div id='persistent-plan-price-display-wrap'>$replacement_markup</div>");
  }
  elseif (!empty($form_state['extra_info']['coupon_error'])) {
    //if coupon code didn't work, show them why
    $commands[] = ajax_command_replace('#plan-price-display-wrap', "<div id='plan-price-display-wrap'><div class='coupon-error'>".$form_state['extra_info']['coupon_error']."</div></div>");
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function bei_recurly_load_recurly_library() {
  $settings = array(
    'api_key' => variable_get('recurly_private_api_key', ''),
    'subdomain' => variable_get('recurly_subdomain', ''),
    'public_key' => variable_get('recurly_public_key', ''),
  );
  // If we can find a path in the libraries directory to the Recurly PHP client
  // library...
  $path = libraries_get_path('recurly');
  if ($path && file_exists($path . '/lib/recurly.php')) {
    // Include the library files and configure authentication.
    require_once $path . '/lib/recurly.php';

    // Required for the API.
    Recurly_Client::$apiKey = $settings['api_key'];
  }
  else {
    watchdog('recurly', 'Could not find the Recurly PHP client library in sites/all/libraries/recurly.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

function bei_recurly_state_list() {
  $state_list = array(
    'AL'=>'AL',
    'AK'=>'AK',
    'AS'=>'AS',
    'AZ'=>'AZ',
    'AR'=>'AR',
    'CA'=>'CA',
    'CO'=>'CO',
    'CT'=>'CT',
    'DE'=>'DE',
    'DC'=>'DC',
    'FM'=>'FM',
    'FL'=>'FL',
    'GA'=>'GA',
    'GU'=>'GU',
    'HI'=>'HI',
    'ID'=>'ID',
    'IL'=>'IL',
    'IN'=>'IN',
    'IA'=>'IA',
    'KS'=>'KS',
    'KY'=>'KY',
    'LA'=>'LA',
    'ME'=>'ME',
    'MH'=>'MH',
    'MD'=>'MD',
    'MA'=>'MA',
    'MI'=>'MI',
    'MN'=>'MN',
    'MS'=>'MS',
    'MO'=>'MO',
    'MT'=>'MT',
    'NE'=>'NE',
    'NV'=>'NV',
    'NH'=>'NH',
    'NJ'=>'NJ',
    'NM'=>'NM',
    'NY'=>'NY',
    'NC'=>'NC',
    'ND'=>'ND',
    'MP'=>'MP',
    'OH'=>'OH',
    'OK'=>'OK',
    'OR'=>'OR',
    'PW'=>'PW',
    'PA'=>'PA',
    'PR'=>'PR',
    'RI'=>'RI',
    'SC'=>'SC',
    'SD'=>'SD',
    'TN'=>'TN',
    'TX'=>'TX',
    'UT'=>'UT',
    'VT'=>'VT',
    'VI'=>'VI',
    'VA'=>'VA',
    'WA'=>'WA',
    'WV'=>'WV',
    'WI'=>'WI',
    'WY'=>'WY',
    'AE'=>'AE',
    'AA'=>'AA',
    'AP'=>'AP'
  );
  return $state_list;
}

/*
 * using 'r-destination' instead of 'destination'
 * because we only want to invoke this hook specifically
 * from recurly login links, which are not fixed values
 */
function bei_recurly_user_login(&$edit, $account) {
  if (!empty($_GET['r-destination'])) {
    global $user;
    bei_recurly_load_recurly_library();
    //check for existing recurly acount
    try {
      $recurly_account = Recurly_Account::get($user->uid);
      drupal_set_message("Looks like you already have an active subscription - you can manage it below.");
      //this is needed to work happy with existing user redirect rule
      $_GET['destination'] = 'user/' . $user->uid . '/edit';
      $edit['redirect'] = 'user/' . $user->uid . '/edit';
    }
    catch (Recurly_NotFoundError $e) {
      //this is needed to work happy with existing user redirect rule
      $_GET['destination'] = $_GET['r-destination'];
      $edit['redirect'] = $_GET['r-destination'];
    }
  }
}