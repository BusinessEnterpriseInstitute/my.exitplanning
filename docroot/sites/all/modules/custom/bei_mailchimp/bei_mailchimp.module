<?php

/**
 * @file
 * Mailchimp operations using Drupal hooks and helper functions.
 */

/**
 * Implements hook_cron().
 */
function bei_mailchimp_cron() {
  // Gather all list IDs.
  $current_time = REQUEST_TIME;
  // Lets check for scheduled campaigns that have been sent.
  $query = 'SELECT n.nid FROM {bei_campaign} n WHERE n.campaign_status = :campaign_status AND n.schedule_date < :current_time';
  $results = db_query_range($query, 0, 25, array(':campaign_status' => 'schedule', ':current_time' => $current_time))->fetchAll();
  // Load all of the campaigns that have not been sent and get their status.
  if (!empty($results)) {
    foreach ($results as $result) {
      $node = node_load($result->nid);
      if ($node) {
        $existing_key = bei_mailchimp_load_key_by_user($node->uid);
        $mc_key = $existing_key != FALSE ? $existing_key['key'] : NULL; 
        $cid = $node->campaign_id;
        $mc_campaigns = mailchimp_get_api_object('MailchimpCampaigns', $mc_key);
        try {
          if (!$mc_campaigns) {
            throw new MailchimpException('Cannot get campaigns without MailChimp API. Check API key has been entered.');
          }
          $campaign = $mc_campaigns->getCampaign($cid);
          if ($campaign && $campaign->status == 'sent') {
            $node->campaign_status = $campaign->status;
            $node->sent_date = strtotime($campaign->send_time);
            node_save($node);
          }
        }
        catch (Exception $e) {
          watchdog('bei_mailchimp', 'An error occurred requesting campaign information from MailChimp. "%message"', array(
            '%message' => $e->getMessage(),
          ), WATCHDOG_ERROR);
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function bei_mailchimp_menu() {
  $items = array();
  $items['admin/config/bei_mailchimp'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'BEI Mailchimp',
    'description' => 'Settings for BEI Mailchimp',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer bei mailchimp'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['bei-mailchimp/newsletter-autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'bei_mailchimp_newsletter_autocomplete',
  );
  $items['user/%user/bei-mailchimp'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Mailchimp',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bei_mailchimp_user_key_form', 1),
    'access arguments' => array('administer bei mailchimp'),
    'weight' => 30,
    'file' => 'includes/bei_mailchimp.admin.inc',
  );
  $items['user/%user/bei-mailchimp/keys'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'API Keys',
  );
  $items['user/%user/bei-mailchimp/lists'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bei_mailchimp_user_lists_form', 1),
    'access arguments' => array('administer bei mailchimp'),
    'file' => 'includes/bei_mailchimp.admin.inc',
  );
  return $items;
}
/**
 * Implements hook_permission().
 */
function bei_mailchimp_permission() {
  return array(
    'administer bei mailchimp' => array(
      'title' => t('Administer BEI Mailchimp'),
      'description' => t('Allows the role to configure case study settings'),
      'restrict access' => TRUE,
    ),
    'bei_mailchimp_create_campaign' => array(
      'title' => t('Create custom Campaign'),
      'description' => t('Gives the ability to access custom create campaign page that includes a rules form.'),
    ),
    'bei_mailchimp_access_campaign_templates' => array(
      'title' => t('Access the campaign template library'),
      'description' => t('Gives access to the newsletter template library page for adding campaigns.'),
    ),
  );
}

/**
 * Helper function to gather open and click details for a member per campaign.
 */
function _bei_mailchimp_get_member_activity($activity) {
  // Set default open and clicked variables.
  $opens = 0;
  $clicks = 0;
  // Loop through each action and gather opens and clicks only.
  foreach ($activity as $entry) {
    if ($entry['action'] == 'open') {
      $opens += 1;
    }
    elseif ($entry['action'] == 'click') {
      $clicks += 1;
    }
  };
  // Return the data as an array.
  return array(
    'opens' => $opens,
    'clicks' => $clicks,
  );
}

/**
 * Helper function to check if string is UTF-8 formatted
 */
function bei_mailchimp_is_utf8($str) {
    return (bool) preg_match('//u', $str);
}

/**
 * Helper function to log errors in multiple places.
 */
function _bei_mailchimp_log_error($feed_nid, $message, $mail, $error) {
  //drupal_set_message($message, 'error');
  watchdog('BEI Mailchimp', $message, array(), $error);
  feeds_log('subscribers', $feed_nid, 'subscriber', $message, array(), $error);
}

/**
 * Implements hook_form_alter().
 */
function bei_mailchimp_form_alter(&$form, $form_state, $form_id) {
  // Add an autocomplete to the textfield upon campaign creation.
  if ($form_id == 'views_form_administer_subscriber_lists_page') {
    $form['parameter']['newsletter_node']['settings']['newsletter_node']['#autocomplete_path'] = 'bei-mailchimp/newsletter-autocomplete';
  }
  // Subscriber list alterations.
  if ($form_id == 'subscriber_list_node_form') {
    // Hide the delete button on lists. Lists work themselves out.
    unset($form['actions']['delete']);
  }
}

/**
 * Autocomplete to pull newsletter node titles.
 */
function bei_mailchimp_newsletter_autocomplete($string) {
  $matches = array();
  $result = db_select('node', 'n')
    ->fields('n', array('title', 'nid'))
    ->condition('type', 'newsletter')
    ->condition('title', '%' . db_like($string) . '%', 'LIKE')
    ->execute();
  // Save the query to matches.
  foreach ($result as $row) {
    $matches[$row->nid] = check_plain($row->title);
  }
  // Return the result to the form in JSON.
  drupal_json_output($matches);
}

/**
 * Helper function to get lists.
 *
 * @param bool $show_nid
 *  A flag to determine whether to show a node id next to the list name.
 *
 * @return $lists
 *  An array of all list nodes.
 */
function bei_mailchimp_get_lists($show_nid = FALSE) {
  $lists = array();
  // Grab all list nodes.
  $query = "SELECT n.nid, n.title FROM {node} n WHERE n.type = :type ORDER BY n.title";
  $results = db_query($query, array(':type' => 'subscriber_list'));
  foreach ($results as $result) {
    if ($show_nid == TRUE) {
      $nid = ' [nid:' . $result->nid . ']';
    }
    else {
      $nid = '';
    }
    $lists[$result->nid] = $result->title . $nid;
  }
  return $lists;
}

/**
 * Helper function to load mailchimp api key by user id.
 */
function bei_mailchimp_load_key_by_user($uid) {
  $mc_key = FALSE;
  $key = db_query('SELECT * FROM {bei_mc_keys} k WHERE k.uid = :uid', array(':uid' => $uid))->fetchObject();
  if ($key) {
    $mc_key = array(
      'key' => decrypt($key->data),
      'account' => $key->account,
    );
  }
  return $mc_key;
}

/**
 * Generate a key to include in the webhook url based on a hash.
 *
 * @string $list_id
 *
 * @return string
 *   The key.
 */
function bei_mailchimp_webhook_key() {
  return drupal_hash_base64($GLOBALS['base_url'] . drupal_get_private_key() . drupal_get_hash_salt());
}
/**
 * Check if the given email is subscribed to the given list.
 *
 * Simple wrapper around bei_mailchimp_get_memberinfo().
 *
 * @param string $list_id
 *   Unique string identifier for the list on your MailChimp account.
 * @param string $email
 *   Email address to check for on the identified MailChimp List.
 * @param bool $reset
 *   Set to TRUE to ignore the cache. (Used heavily in testing functions.)
 * @param string $api_key
 *  The Mailchimp api key to use.
 *
 * @return bool
 *   Indicates subscription status.
 */
function bei_mailchimp_is_subscribed($list_id, $email, $reset = FALSE, $api_key = NULL) {
  $subscribed = FALSE;
  $memberinfo = bei_mailchimp_get_memberinfo($list_id, $email, $reset, $api_key);
  if (isset($memberinfo->status) && $memberinfo->status == 'subscribed') {
    $subscribed = TRUE;
  }
  return $subscribed;
}

/**
 * Get the MailChimp member info for a given email address and list.
 *
 * Results are cached in the cache_mailchimp bin which is cleared by the
 * MailChimp web hooks system when needed.
 *
 * @param string $list_id
 *   The MailChimp list ID to get member info for.
 * @param string $email
 *   The MailChimp user email address to load member info for.
 * @param bool $reset
 *   Set to TRUE if member info should not be loaded from cache.
 * @param string $api_key
 *  The MailChimp api key to use.
 *
 * @return object
 *   Member info object, empty if there is no valid info.
 */
function bei_mailchimp_get_memberinfo($list_id, $email, $reset = FALSE, $api_key = NULL) {
  $cache = $reset ? NULL : cache_get($list_id . '-' . $email, 'cache_mailchimp');
  // Return cached lists:
  if ($cache) {
    return $cache->data;
  }
  // Query lists from the MCAPI and store in cache:
  $memberinfo = new stdClass();
  /* @var \Mailchimp\MailchimpLists $mc_lists */
  $mc_lists = mailchimp_get_api_object('MailchimpLists', $api_key);
  try {
    if (!$mc_lists) {
      throw new MailchimpException('Cannot get member info without MailChimp API. Check API key has been entered.');
    }
    try {
      $memberinfo = $mc_lists->getMemberInfo($list_id, $email);
      cache_set($list_id . '-' . $email, $memberinfo, 'cache_mailchimp', CACHE_TEMPORARY);
    }
    catch (Exception $e) {
      // Throw exception only for errors other than member not found.
      if ($e->getCode() != 404) {
        throw new Exception($e->getMessage(), $e->getCode(), $e);
      }
    }
  }
  catch (Exception $e) {
    watchdog('mailchimp', 'An error occurred requesting memberinfo for @email in list @list. "%message"', array(
      '@email' => $email,
      '@list' => $list_id,
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
  }

  return $memberinfo;
}
/**
 * Wrapper around MailchimpLists::addOrUpdateMember().
 *
 * @see MailchimpLists::addOrUpdateMember()
 *
 * @return object
 *   On success a result object will be returned from Mailchimp. On failure an
 *   object will be returned with the property success set to FALSE, the
 *   response code as a property, and the message as a property. To check for
 *   a failure, look for the property 'success' of the object returned to
 *   be set to FALSE.
 */
function bei_mailchimp_subscribe_process($subscriber, $list_id, $email, $merge_vars = NULL, $interests = array(), $double_optin = FALSE, $format = 'html', $mc_key) {
  $result = FALSE;
  try {
    /* @var \Mailchimp\MailchimpLists $mc_lists */
    $mc_lists = mailchimp_get_api_object('MailchimpLists', $mc_key);
    if (!$mc_lists) {
      throw new MailchimpException('Cannot subscribe to list without MailChimp API. Check API key has been entered.');
    }
    $parameters = array(
      // If double opt-in is required, set member status to 'pending', but only
      // if the user isn't already subscribed.
      'status' => ($double_optin && !bei_mailchimp_is_subscribed($list_id, $email)) ? \Mailchimp\MailchimpLists::MEMBER_STATUS_PENDING : \Mailchimp\MailchimpLists::MEMBER_STATUS_SUBSCRIBED,
      'email_type' => $format,
    );
    // Set interests.
    if (!empty($interests)) {
      $parameters['interests'] = (object) $interests;
    }

    // Set merge fields.
    if (!empty($merge_vars)) {
      $parameters['merge_fields'] = (object) $merge_vars;
    }

    // Add member to list.
    $result = $mc_lists->addOrUpdateMember($list_id, $email, $parameters);

    if (isset($result->id)) {
      $subscriber->status = $result->status;
      $subscriber->unique_email_id = $result->unique_email_id;
      $subscriber->changed = REQUEST_TIME;
      entity_save('bei_subscriber', $subscriber);
      mailchimp_cache_clear_member($list_id, $email);
      watchdog('bei_mailchimp', '@email was subscribed to list @list.',
        array('@email' => $email, '@list' => $list_id), WATCHDOG_NOTICE
      );
    }
    else {
      if (!variable_get('mailchimp_test_mode')) {
        watchdog('bei_mailchimp', 'A problem occurred subscribing @email to list @list.', array(
          '@email' => $email,
          '@list' => $list_id,
        ), WATCHDOG_WARNING);
      }
    }
  }
  catch (Exception $e) {
    if ($e->getCode() == '400' && strpos($e->getMessage(), 'Member In Compliance State') !== false && !$double_optin) {
      watchdog('bei_mailchimp', 'Detected "Member In Compliance State" subscribing @email to list @list.  Trying again using double-opt in.', array(
        '@email' => $email,
        '@list' => $list_id,
      ), WATCHDOG_INFO);
      return bei_mailchimp_subscribe_process($subscriber, $list_id, $email, $merge_vars, $interests, TRUE, $format, $mc_key);
    }

    watchdog('bei_mailchimp', 'An error occurred subscribing @email to list @list. Status code @code. "%message"', array(
      '@email' => $email,
      '@list' => $list_id,
      '%message' => $e->getMessage(),
      '@code' => $e->getCode(),
    ), WATCHDOG_ERROR);
    $result = new stdClass();
    $result->success = FALSE;
    $result->status = $e->getCode();
    $result->message = $e->getMessage();
  }
  return $result;
}
/**
 * Update a members list subscription in real time or by adding to the queue.
 *
 * @see Mailchimp_Lists::updateMember()
 *
 * @return bool
 *   Success or failure.
 */
function bei_mailchimp_update_member($subscriber, $list_id, $email, $merge_vars, $interests, $format = 'html', $double_optin = FALSE, $mc_key = NULL, $skip_cron = FALSE) {
  if (!$skip_cron && variable_get('mailchimp_cron', FALSE)) {
    $args = array(
      'subscriber' => $subscriber,
      'list_id' => $list_id,
      'email' => $email,
      'merge_vars' => $merge_vars,
      'interests' => $interests,
      'format' => $format,
      'double_optin' => $double_optin,
      'mc_key' => $mc_key,
      'skip_cron' => $skip_cron,
    );
    return mailchimp_addto_queue('bei_mailchimp_update_member_process', $args);
  }

  return bei_mailchimp_update_member_process($subscriber, $list_id, $email, $merge_vars, $interests, $format, $double_optin, $mc_key, $skip_cron = FALSE);
}

/**
 * Wrapper around MailchimpLists::updateMember().
 *
 * @see MailchimpLists::updateMember()
 *
 * @return bool
 *   Success or failure.
 */
function bei_mailchimp_update_member_process($subscriber, $list_id, $email, $merge_vars, $interests, $format, $double_optin = FALSE, $mc_key, $skip_cron = FALSE) {
  $result = FALSE;
  try {
    /* @var \Mailchimp\MailchimpLists $mc_lists */
    $mc_lists = mailchimp_get_api_object('MailchimpLists', $mc_key);
    if (!$mc_lists) {
      throw new MailchimpException('Cannot update member without MailChimp API. Check API key has been entered.');
    }

    $parameters = array(
      'status' => ($double_optin) ? \Mailchimp\MailchimpLists::MEMBER_STATUS_PENDING : \Mailchimp\MailchimpLists::MEMBER_STATUS_SUBSCRIBED,
      'email_type' => $format,
    );

    // Set interests.
    if (!empty($interests)) {
      $parameters['interests'] = (object) $interests;
    }

    // Set merge fields.
    if (!empty($merge_vars)) {
      $parameters['merge_fields'] = (object) $merge_vars;
    }

    // Update member.
    $result = $mc_lists->updateMember($list_id, $email, $parameters);

    if (!empty($result) && isset($result->id)) {
      $subscriber->unique_email_id = $result->unique_email_id;
      $subscriber->changed = REQUEST_TIME;
      entity_save('bei_subscriber', $subscriber);
      watchdog('mailchimp', '@email was updated in list @list_id.', array(
        '@email' => $email,
        '@list' => $list_id,
      ), WATCHDOG_NOTICE);
      // Clear user cache:
      mailchimp_cache_clear_member($list_id, $email);
    }
    else {
      watchdog('mailchimp', 'A problem occurred updating @email on list @list.', array(
        '@email' => $email,
        '@list' => $list_id,
      ), WATCHDOG_WARNING);
    }
  }
  catch (Exception $e) {
    if ($e->getCode() == '400' && strpos($e->getMessage(), 'Member In Compliance State') !== false && !$double_optin) {
      watchdog('mailchimp', 'Detected "Member In Compliance State" updating @email to list @list.  Trying again using double-opt in.', array(
        '@email' => $email,
        '@list' => $list_id,
      ), WATCHDOG_INFO);
      return bei_mailchimp_update_member_process($subscriber, $list_id, $email, $merge_vars, $interests, $format, TRUE, $mc_key, $skip_cron);
    }

    watchdog('mailchimp', 'An error occurred updating @email on list @list. "%message"', array(
      '@email' => $email,
      '@list' => $list_id,
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
  }
  if ($double_optin) {
      drupal_set_message(t('Please check your email to confirm your subscription'), 'status', FALSE);
  }
  return $result;
}
/**
 * Unsubscribe a member from a list.
 *
 * @param string $list_id
 *   A mailchimp list id.
 * @param string $email
 *   Email address to be unsubscribed.
 * @param bool $delete
 *   Indicates whether an email should be deleted or just unsubscribed.
 * @param bool $goodbye
 *   Indicates whether to send the goodbye email to the email address.
 * @param bool $notify
 *   Indicates whether to send the unsubscribe notification email to the address
 *   defined in the list email notification settings.
 *
 * @return bool
 *   Indicates whether unsubscribe was successful.
 */
function bei_mailchimp_unsubscribe_member($list_id, $email, $delete = FALSE, $goodbye = FALSE, $notify = FALSE, $mc_key = NULL) {
  $result = FALSE;

  if (bei_mailchimp_is_subscribed($list_id, $email, FALSE, $mc_key)) {
    if (variable_get('mailchimp_cron', FALSE)) {
      $result = mailchimp_addto_queue(
        'bei_mailchimp_unsubscribe_process',
        array(
          'list_id' => $list_id,
          'email' => $email,
          'delete' => $delete,
          'goodbye' => $goodbye,
          'notify' => $notify,
          'mc_key' => $mc_key,
        )
      );
    }
    else {
      $result = bei_mailchimp_unsubscribe_process($list_id, $email, $delete, $goodbye, $notify, $mc_key);
    }
  }

  return $result;
}

/**
 * Unsubscribe a member from a list.
 *
 * @return bool
 *   Success or failure.
 */
function bei_mailchimp_unsubscribe_process($list_id, $email, $delete, $goodbye, $notify, $mc_key) {
  try {
    /* @var \Mailchimp\MailchimpLists $mc_lists */
    $mc_lists = mailchimp_get_api_object('MailchimpLists', $mc_key);
    if (!$mc_lists) {
      throw new MailchimpException('Cannot unsubscribe from list without MailChimp API. Check API key has been entered.');
    }

    if ($delete) {
      // Remove member from list.
      $mc_lists->removeMember($list_id, $email);
      watchdog('mailchimp', '@email was removed from list @list_id.', array(
        '@email' => $email,
        '@list' => $list_id,
      ), WATCHDOG_INFO);
    }
    else {
      // Unsubscribe member.
      $parameters = array(
        'status' => MailchimpLists::MEMBER_STATUS_UNSUBSCRIBED,
      );
      $mc_lists->updateMember($list_id, $email, $parameters);
      watchdog('mailchimp', '@email was unsubscribed from list @list_id.', array(
        '@email' => $email,
        '@list' => $list_id,
      ), WATCHDOG_INFO);
    }

    // Clear user cache:
    mailchimp_cache_clear_member($list_id, $email);

    return TRUE;
  }
  catch (Exception $e) {
    watchdog('mailchimp', 'An error occurred unsubscribing @email from list @list. "%message"', array(
      '@email' => $email,
      '@list' => $list_id,
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);

    return FALSE;
  }
}