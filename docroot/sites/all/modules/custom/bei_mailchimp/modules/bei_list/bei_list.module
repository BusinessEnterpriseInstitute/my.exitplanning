<?php

/**
 * @file
 * Mailchimp operations using Drupal hooks and helper functions.
 */

/**
 * Implements hook_menu().
 */
function bei_list_menu() {
  $items = array();
  $items['bei-list/webhook'] = array(
    'title' => 'BEI List webhooks endpoint',
    'type' => MENU_CALLBACK,
    'page callback' => 'bei_list_webhook',
    'access callback' => 'bei_list_webhook_access',
    'access arguments' => array(2),
  );
  return $items;
}

/**
 * Implements hook_node_access().
 *
 * Lists should only be managed on MailChimp. Deleting a list on Drupal is
 * dangerous because no API call exists to delete on MailChimp when this
 * happens. Of course this hook doesn't apply to user 1.
 */
function bei_list_node_access($node, $op, $account) {
  // Check to see if someone is trying to delete a list.
  if ($op == 'delete' && $node->type == 'subscriber_list') {
    //drupal_set_message(t('You can not delete lists. If you want to remove a list you must do it on MailChimp.'));
    return FALSE;
  }
}

/**
 * Implements hook_node_load().
 * Act on nodes being loaded from the database.
 */
function bei_list_node_load($nodes, $types) {
   if (in_array('subscriber_list', $types)) {
      $result = db_query('SELECT * FROM {bei_list} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
      foreach ($result as $record) {
         $nodes[$record->nid]->subject = $record->subject;
         $nodes[$record->nid]->from_email = $record->from_email;
         $nodes[$record->nid]->from_name = $record->from_name;
         $nodes[$record->nid]->list_id = $record->list_id;
         $nodes[$record->nid]->mc_data = unserialize($record->mc_data);
      }
   }
}

/**
 * Implementation of hook_node_insert().
 *
 */
function bei_list_node_insert($node) {
  if ($node->type == 'subscriber_list') {
     db_insert('bei_list')
     ->fields(array(
        'nid' => $node->nid,
        'subject' => $node->subject,
        'from_email' => $node->from_email,
        'from_name' => $node->from_name,
        'list_id' => isset($node->list_id) ? $node->list_id : NULL,
        'mc_data' => isset($node->mc_data) ? serialize($node->mc_data) : NULL,
     ))
     ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function bei_list_node_update($node) {
  if ($node->type == 'subscriber_list') {
    $nid = db_query('SELECT l.nid FROM {bei_list} l WHERE l.nid = :nid', array(':nid' => $node->nid))->fetchField();
    if (!empty($nid)) {
       db_update('bei_list')
       ->fields(array(
          'subject' => $node->subject,
          'from_email' => $node->from_email,
          'from_name' => $node->from_name,
          'list_id' => $node->list_id,
          'mc_data' => isset($node->mc_data) ? serialize($node->mc_data) : NULL,
       ))
       ->condition('nid', $node->nid)
       ->execute();
    }
    else {
       db_insert('bei_list')
       ->fields(array(
          'nid' => $node->nid,
          'subject' => $node->subject,
          'from_email' => $node->from_email,
          'from_name' => $node->from_name,
          'list_id' => isset($node->list_id) ? $node->list_id : NULL,
          'mc_data' => isset($node->mc_data) ? serialize($node->mc_data) : NULL,
       ))
       ->execute();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function bei_list_node_delete($node) {
  if ($node->type == 'subscriber_list') {
    db_query('DELETE FROM {bei_list} WHERE nid = :nid', array(':nid' => $node->nid));
  }
}

/**
 * Implements hook_form_alter().
 * Perform alterations before a form is rendered.
 */
function bei_list_form_subscriber_list_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['node'];
  $is_new = isset($node->is_new) || !isset($node->nid);
  $is_administrator = user_access('administer bei mailchimp');
  $form['from_email'] = array(
    '#type' => 'textfield',
    '#title' => t('From e-mail'),
    '#default_value' => isset($node->from_email) ? $node->from_email : '',
    '#required' => TRUE,
    '#element_validate' => array('bei_list_email_validate'),
    '#disabled' => $is_new ? FALSE : TRUE,
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject (optional)'),
    '#description' => t('Keep it relevant and non-spammy. If you leave this
                        blank, a default subject will be applied for each
                        newsletter campaign sent.'),
    '#default_value' => isset($node->subject) ? $node->subject : '',
    '#size' => 60,
    '#maxlength' => 128,
  );
  $form['from_name'] = array(
    '#type' => 'textfield',
    '#title' => t('From name'),
    '#description' => t('This is who your emails will come from. Use something
                        they\'ll instantly recognize, like your company name.'),
    '#default_value' => isset($node->from_name) ? $node->from_name : '',
    '#required' => TRUE,
    '#maxlength' => 200,
  );
}

/**
 * Implementation of hook_validate().
 *
 * Errors should be signaled with form_set_error().
 */
function bei_list_email_validate($element, &$form_state, $form) {
  if (!empty($element['#value']) && !valid_email_address($element['#value'])) {
    form_error($element, t($element['#title'] . ' is not a valid email address.'));
  }
}

/**
 * Implementation of hook_field_extra_fields().
 */
function bei_list_field_extra_fields() {
  $extra['node']['subscriber_list'] = array(
    'form' => array(
      'from_email' => array(
        'label' => t('List: From Email'),
        'description' => t('Default from email'),
        'weight' => -4,
      ),
      'from_name' => array(
        'label' => t('List: From Name'),
        'description' => t('Default from name'),
        'weight' => -3,
      ),
      'subject' => array(
        'label' => t('List: Subject'),
        'description' => t('Default subject'),
        'weight' => -2,
      ),
    ),
    'display' => array(
    )
  );
  return $extra;
}

/**
 * Menu callback to run webhook actions from mailchimp.
 */
function bei_list_webhook() {
  if (empty($_POST)) {
    return "BEI List Webhook Endpoint.";
  }
  $data = $_POST['data'];
  $type = $_POST['type'];
  $fired_at = $_POST['fired_at'];
  $mc_key = NULL;
  switch ($type) {
    case 'subscribe':
    case 'unsubscribe':
    case 'profile':
    case 'cleaned':
      $query = "SELECT * FROM {bei_subscriber} s WHERE s.email = :email AND s.list_id = :list_id";
      $subscriber = db_query($query, array(':email' => $data['email'], ':list_id' => $data['list_id']))->fetchObject();
      if ($subscriber) {
        $existing_key = bei_mailchimp_load_key_by_user($subscriber->uid);
        $mc_key = $existing_key != FALSE ? $existing_key['key'] : NULL;
        $member = bei_mailchimp_get_memberinfo($data['list_id'], $data['email'], TRUE, $mc_key);
        bei_list_webhook_member_update($member, $subscriber);
      }
      elseif ($type == 'subscribe') {
        $nid = db_query('SELECT l.nid FROM {bei_list} l WHERE l.list_id = :list_id', array(':list_id' => $data['list_id']))->fetchField();
        if ($nid) {
          $node = node_load($nid);
          $existing_key = bei_mailchimp_load_key_by_user($node->uid);
          $mc_key = $existing_key != FALSE ? $existing_key['key'] : NULL;
          $member = bei_mailchimp_get_memberinfo($data['list_id'], $data['email'], FALSE, $mc_key);
          bei_list_webhook_member_add($member, $node);
        }
      }
      break;

    case 'upemail':
      $old_email = $data['old_email'];
      $query = "SELECT * FROM {bei_subscriber} s WHERE s.email = :email AND s.list_id = :list_id";
      $subscriber = db_query($query, array(':email' => $old_email, ':list_id' => $data['list_id']))->fetchObject();
      if ($subscriber) {
        $existing_key = bei_mailchimp_load_key_by_user($subscriber->uid);
        $mc_key = $existing_key != FALSE ? $existing_key['key'] : NULL;
        mailchimp_cache_clear_member($data['list_id'], $data['old_email']);
        $member = bei_mailchimp_get_memberinfo($data['list_id'], $data['new_email'], TRUE, $mc_key);
        bei_list_webhook_update_email($old_email, $member, $subscriber);
      }
      break;
  }

  // Log event:
  watchdog('bei_list', 'Webhook type @type has been processed.',
    array('@type' => $type), WATCHDOG_INFO
  );
  return NULL;
}

/**
 * Webhook create subscriber helper function
 */
function bei_list_webhook_member_add($member, $node = NULL) {
  // Create a subscriber
  $email = $member->email_address;
  $list_id = $member->list_id;
  if (isset($node->nid)) {
    $subscriber = new stdClass('bei_subscriber');
    $subscriber->uid = $node->uid;
    $subscriber->lid = $node->nid;
    $subscriber->created = REQUEST_TIME;
    $subscriber->changed = REQUEST_TIME;
    $subscriber->email = $member->email_address;
    $subscriber->status = $member->status;
    $subscriber->first_name = $member->merge_fields->FNAME;
    $subscriber->last_name = $member->merge_fields->LNAME;
    $subscriber->list_id = $list_id;
    $subscriber->unique_email_id = $member->unique_email_id;
    entity_save('bei_subscriber', $subscriber);
    // Log event:
    watchdog('bei_list', 'New Subscriber @email created for list @list.',
      array('@email' => $email, '@list' => $list_id), WATCHDOG_INFO
    );
  }
}

/**
 * Webhook update subscriber helper function
 */
function bei_list_webhook_member_update($member, $subscriber = NULL) {
  $email = $member->email_address;
  $list_id = $member->list_id;
  if ($subscriber) {
    $subscriber->first_name = $member->merge_fields->FNAME;
    $subscriber->last_name = $member->merge_fields->LNAME;
    $subscriber->status = $member->status;
    $subscriber->changed = REQUEST_TIME;
    entity_save('bei_subscriber', $subscriber);
    // Log event:
    watchdog('bei_list', 'Subscriber @email was updated for list @list.',
      array('@email' => $email, '@list' => $list_id), WATCHDOG_INFO
    );
  }
}

/**
 * Webhook update email helper function
 */
function bei_list_webhook_update_email($old_email, $member, $subscriber = NULL) {
  $new_email = $member->email_address;
  $list_id = $member->list_id;
  if ($subscriber) {
    $subscriber->email = $new_email;
    $subscriber->changed = REQUEST_TIME;
    entity_save('bei_subscriber', $subscriber);
    // Log event:
    watchdog('bei_list', 'The e-mail address @old_email was changed to @new_email for list @list.',
      array('@old_email' => $old_email, '@new_email' => $new_email, '@list' => $list_id), WATCHDOG_INFO
    );
  }
}

/**
 * Access callback for bei_list_webhook().
 *
 * @string $key
 */
function bei_list_webhook_access($key) {
  return $key == bei_mailchimp_webhook_key();
}

/**
 * Generate the webhook endpoint URL.
 *
 * @string $list_id
 *
 * @return string
 *   The endpoint URL.
 */
function bei_list_webhook_url() {
  $key = bei_mailchimp_webhook_key();
  return $GLOBALS['base_url'] . '/bei-list/webhook/' . $key;
}

/**
 * Implements hook_entity_property_info_alter()
 */
function bei_list_entity_property_info_alter(&$info) {
  $properties = &$info['node']['bundles']['subscriber_list']['properties'];
  $properties['from_email'] = array(
   'label' => t('List: From e-mail'),
   'type' => 'text',
   'description' => t('The default reply to e-mail.'),
   'getter callback' => 'bei_list_get_properties',
   'setter callback' => 'entity_property_verbatim_set',
   'entity views field' => TRUE,
  );
  $properties['from_name'] = array(
   'label' => t('List: From name'),
   'type' => 'text',
   'description' => t('The default name of the person/company sending the campaign.'),
   'getter callback' => 'bei_list_get_properties',
   'setter callback' => 'entity_property_verbatim_set',
   'entity views field' => TRUE,
  );
  $properties['subject'] = array(
   'label' => t('List: Subject'),
   'type' => 'text',
   'description' => t('The default subject field for the campaign.'),
   'getter callback' => 'bei_list_get_properties',
   'setter callback' => 'entity_property_verbatim_set',
   'entity views field' => TRUE,
  );
  $properties['list_id'] = array(
   'label' => t('List: List id'),
   'type' => 'text',
   'description' => t('The list id on Mailchimp.'),
   'getter callback' => 'bei_list_get_properties',
   'setter callback' => 'entity_property_verbatim_set',
   'entity views field' => TRUE,
  );
}

/**
 * Callback for getting campaign extra field properties.
 *
 */
function bei_list_get_properties($node, array $options, $name, $entity_type) {
  switch ($name) {
    case 'from_email':
      $value = isset($node->from_email) ? $node->from_email : NULL;
      return $value;
      break;
    case 'from_name':
      $value = isset($node->from_name) ? $node->from_name : NULL;
      return $value;
      break;
    case 'subject':
      $value = isset($node->subject) ? $node->subject : NULL;
      return $value;
      break;
    case 'list_id':
      $value = isset($node->list_id) ? $node->list_id : NULL;
      return $value;
      break;
  }
}

/**
 * Helper function to get lists from cache or mailchimp.
 */
function bei_list_get_lists($reset = FALSE) {
  $cache = $reset ? NULL : cache_get('lists', 'cache_mailchimp');
  $lists = array();
  // Return cached lists:
  if ($cache) {
    $lists = $cache->data;
  }
  else {
    try {
      /* @var \Mailchimp\MailchimpLists $mc_lists */
      $mc_lists = mailchimp_get_api_object('MailchimpLists');
      if (!$mc_lists) {
        throw new MailchimpException('Cannot get lists without MailChimp API. Check API key has been entered.');
      }
      $result = $mc_lists->getLists(array('count' => 500));

      if ($result->total_items > 0) {
        foreach ($result->lists as $list) {
          $lists[$list->id] = $list;
        }
      }
      cache_set('lists', $lists, 'cache_mailchimp', CACHE_TEMPORARY);
    }
    catch (Exception $e) {
      watchdog('mailchimp', 'An error occurred requesting list information from MailChimp. "%message"', array(
        '%message' => $e->getMessage(),
      ), WATCHDOG_ERROR);
    }
  }
  return $lists;
}

/**
 * Implements hook_views_api().
 */
function bei_list_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bei_list') . '/views',
  );
}
/**
 * Implements hook_ctools_plugin_directory().
 */
function bei_list_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}
