<?php

/**
 * @file
 * Mailchimp module.
 */

/**
 * Implements hook_libraries_info().
 */
function mailchimp_old_libraries_info() {
  $libraries['mailchimp_old'] = array(
    'name' => 'MailChimp Old MCAPI',
    'vendor url' => 'http://apidocs.mailchimp.com/api/2.0',
    'download url' => 'https://bitbucket.org/mailchimp/mailchimp-api-php/get/2.0.6.zip',
    'path' => 'src',
    'version arguments' => array(
      'file' => 'composer.json',
      // Version 2.0.6
      'pattern' => '/\"version": \"((\d+)\.(\d+)\.(\d+))\",/',
    ),
    'files' => array(
      'php' => array('Mailchimp.php'),
    ),
  );

  return $libraries;
}


/**
 * Access callback for mailchimp submodule menu items.
 */
function mailchimp_old_apikey_ready_access($permission) {
  if (mailchimp_old_get_api_object() && user_access($permission)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Get a MailChimp API object for communication with the MailChimp server.
 *
 * @return DrupalMailchimp
 *   The default return value is an instance of DrupalMailchimp, although that
 *   can be overridden.
 */
function mailchimp_old_get_api_object($api_key = NULL) {
  $mailchimp = &drupal_static(__FUNCTION__);
  if (isset($mailchimp)) {
    return $mailchimp;
  }

  // We allow the class name to be overridden, following the example of core's
  // mailsystem, in order to use alternate MailChimp classes. The bundled tests
  // use this approach to extend the MailChimp class with a test server.
  $classname = variable_get('mailchimp_old_api_classname', 'DrupalMailchimpOld');

  $library = libraries_load('mailchimp_old');
  if (!$library['installed']) {
    $msg = t('Failed to load MailChimp Old PHP library. Please refer to the installation requirements.');
    watchdog('mailchimp_old', $msg, array(), WATCHDOG_ERROR);
    drupal_set_message($msg, 'error');
    return NULL;
  }
  if (!$api_key) {
    $api_key = variable_get('mailchimp_api_key', '');
  }
  if (!strlen($api_key)) {
    watchdog('mailchimp_old', t('MailChimp Old Error: API Key cannot be blank.'), array(), WATCHDOG_ERROR);
    return NULL;
  }
  // Set the timeout to something that won't take down the Drupal site:
  $options = array('timeout' => 60);

  $mailchimp = new $classname($api_key, $options);

  return $mailchimp;
}
