diff --git a/restrict_by_ip.module b/restrict_by_ip.module
index 8c489de..ab05bc8 100644
--- a/restrict_by_ip.module
+++ b/restrict_by_ip.module
@@ -221,6 +221,12 @@ function restrict_by_ip_login_settings() {
     '#description' => t('To restrict login for ALL users, enter global IP Address Ranges in CIDR Notation seperated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation click <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting">here</a>.<br />Leave field blank to disable IP restrictions for user login.'),
     '#default_value' => variable_get('restrict_by_ip_login_range', ''),
   );
+  $form['restrict_by_ip_login_global_and_user'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Users must pass global AND user restrictions'),
+    '#description' => t("If checked, the user must match BOTH the global and user restrictions or they won't be allowed to login."),
+    '#default_value' => variable_get('restrict_by_ip_login_global_and_user', 1),
+  );
   $form['restrict_login_by_ip_list'] = array(
     '#type' => 'fieldset',
     '#title' => t('Current login restrictions'),
@@ -433,7 +439,7 @@ function restrict_by_ip_user_role_update($role) {
 /**
  * Perform an IP restriction check for all roles belonging to the given user.
  */
-function restrict_by_ip_role_check(&$user){
+function restrict_by_ip_role_check(&$user) {
   $ip2check = _restrict_by_ip_get_ip();
   // Check each role belonging to specified user
   foreach ($user->roles as $rid => $name) {
@@ -464,67 +470,105 @@ function restrict_by_ip_role_check(&$user){
 function _restrict_by_ip_login(&$user) {
   if ($user->uid != 0) {
     $ip2check = _restrict_by_ip_get_ip();
+    $global_login_valid = TRUE;
+    $global_login_empty = TRUE;
+    $user_login_valid = TRUE;
+    $user_login_empty = TRUE;
+    $global_and_user = variable_get('restrict_by_ip_login_global_and_user', 1);
 
     // Check for global login IP restrictions and validate against
     $global_data = variable_get('restrict_by_ip_login_range', '');
     if (strlen($global_data) > 0) {
-      $valid = FALSE;
+      $global_login_valid = FALSE;
+      $global_login_empty = FALSE;
       $ipaddresses = explode(';', $global_data);
       if (is_array($ipaddresses)) {
         foreach ($ipaddresses as $ipaddress) {
           if (_restrict_by_ip_cidrcheck($ip2check, $ipaddress)) {
-            $valid = TRUE;
+            $global_login_valid = TRUE;
           }
         }
       }
-      if (!$valid) {
-        // Log the error with the ip address
-        watchdog('user', t('Session closed for %name - Invalid IP. '.$ip2check, array('%name' => $user->name)));
-        // Destroy the current session
-        session_destroy();
-        module_invoke_all('user', 'logout', NULL, $user);
-        // Load the anonymous user
-        $user = drupal_anonymous_user();
-        // unset destination required to force them to the ip page during drupal_goto()
-        if (isset($_GET['destination'])) {
-          unset($_GET['destination']);
-        }
-        // Goto the page detailed in the site configuration - restrict by ip - settings page
-        drupal_goto(variable_get('restrict_by_ip_error_page', ''));
-      }
+    }
+
+    // Restricts if the user fails the global check and the "global and user"
+    // variable is set to 1.
+    if ($global_login_valid === FALSE && $global_and_user === 1) {
+      _restrict_by_ip_logout($ip2check, $user);
     }
 
     // Check for individual user IP restrictions and validate against them
     $usrdata = db_query('SELECT * FROM {restrict_by_ip} WHERE uid = :uid', array(':uid' => $user->uid))->fetchObject();
-    $logonvalid = FALSE;
     // If the user has restrict by ip address set
     if ($usrdata) {
+      $user_login_valid = FALSE;
+      $user_login_empty = FALSE;
       $ipaddresses = explode(";", $usrdata->restrict_by_ip_address);
       // Check each valid ip address in database against users ip address
       // If one matches allow logon
       foreach ($ipaddresses as $ipaddress) {
         if (_restrict_by_ip_cidrcheck($ip2check, $ipaddress)) {
-          $logonvalid = TRUE;
+          $user_login_valid = TRUE;
+        }
+      }
+    }
+
+    // Restricts if the user fails the user login check and the
+    // "global and user" variable is set.
+    if ($user_login_valid === FALSE && $global_and_user === 1) {
+      _restrict_by_ip_logout($ip2check, $user);
+    }
+
+    // Handles the case where either the global or the user restriction is used
+    // but not both.
+    // If the "global and user" variable is not set:
+    if ($global_and_user === 0) {
+      // If there are values for user but not global:
+      if ($global_login_empty === TRUE && $user_login_empty === FALSE) {
+        // If the user is not using an appropriate IP
+        if ($user_login_valid === FALSE) {
+          _restrict_by_ip_logout($ip2check, $user);
         }
       }
-      // Restrict by ip address is set and no addresses match users ip address
-      if (!$logonvalid) {
-        // Log the error with the ip address
-        watchdog('user', t('Session closed for %name - Invalid IP. '.$ip2check, array('%name' => $user->name)));
-        // Destroy the current session
-        session_destroy();
-        module_invoke_all('user', 'logout', NULL, $user);
-        // Load the anonymous user
-        $user = drupal_anonymous_user();
-        // unset destination required to force them to the ip page during drupal_goto()
-        if (isset($_GET['destination'])) {
-          unset($_GET['destination']);
+      // If there are values for global but not user:
+      if ($global_login_empty === FALSE && $user_login_empty === TRUE) {
+        // If the user is not using an appropriate IP
+        if ($global_login_valid === FALSE) {
+          _restrict_by_ip_logout($ip2check, $user);
         }
-        // Goto the page detailed in the site configuration - restrict by ip - settings page
-        drupal_goto(variable_get('restrict_by_ip_error_page', ''));
       }
     }
+
+    // Handles the case where both the global and the user restriction is used.
+    // Restricts if the user fails the global check and fails the user
+    // login check.
+    if ($global_login_valid === FALSE && $user_login_valid === FALSE) {
+      _restrict_by_ip_logout($ip2check, $user);
+    }
+  }
+}
+
+/**
+ * Handles actions associated with logging out a user based on IP restrictions.
+ */
+function _restrict_by_ip_logout($ip2check, $user) {
+  // Logs the error with the IP address.
+  watchdog('user', t('Session closed for %name - Invalid IP. @ip', array(
+    '%name' => $user->name,
+    '@ip' => $ip2check
+  )));
+  // Destroys the current session.
+  session_destroy();
+  module_invoke_all('user', 'logout', NULL, $user);
+  // Loads the anonymous user.
+  $user = drupal_anonymous_user();
+  // Unsets destination to force the user to the redirect page in drupal_goto().
+  if (isset($_GET['destination'])) {
+    unset($_GET['destination']);
   }
+  // Redirects to the page set in the configurations settings or to the front
+  // page if the variables is not set.
+  drupal_goto(variable_get('restrict_by_ip_error_page', ''));
 }
 
 /**
