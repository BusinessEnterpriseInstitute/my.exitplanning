<?php
/**
 * @file
 * Token Entity render module.
 */

/**
 * Implements hook_token_info().
 */
function token_entity_render_token_info() {
  $tokens = array();
  $entities = entity_get_info();
  foreach ($entities as $entity) {
    $tokens[$entity['token type']] = array(
      'render' => array(
        'name' => t('Rendered @type', array('@type' => $entity['label'])),
        'description' => t('Renders a @type using the pattern [@label:render:?], where ? stands for the view mode name.',
          array(
            '@label' => $entity['token type'],
            '@type' => $entity['label']
          )),
      ),
      'render_content' => array(
        'name' => t('Rendered @type content only', array('@type' => $entity['label'])),
        'description' => t('Renders a @type without it\'s title using the pattern [@label:render_content:?], where ? stands for the view mode name.',
          array(
            '@label' => $entity['token type'],
            '@type' => $entity['label']
          )),
      ),
    );
  }
  return array(
    'tokens' => $tokens,
  );
}

/**
 * Implements hook_tokens().
 */
function token_entity_render_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'entity') {
    $replacements = array();
    $langcode = !empty($options['language']->language) ? $options['language']->language : NULL;
    foreach ($tokens as $name => $original) {
      $parts = explode(':', $name);
      if ($parts[0] == 'render' || $parts[0] == 'render_content') {
        $view_mode = 'full';
        $page = $parts[0] == 'render_content' ? TRUE : NULL;
        if (isset($parts[1])) {
          $entity_info = entity_get_info($data['entity_type']);
          if (isset($entity_info['view modes'][$parts[1]])) {
            $view_mode = $parts[1];
          }
        }
        $rendered_entity = entity_view($data['entity_type'], array($data['entity']), $view_mode, $langcode, $page);
        $replacements[$original] = drupal_render($rendered_entity);
      }
    }

    return $replacements;
  }
}
