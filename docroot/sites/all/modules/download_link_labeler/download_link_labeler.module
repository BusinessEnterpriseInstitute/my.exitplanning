<?php

/**
 * @file
 * download_link_labeler.module
 *
 * Provides a filter to add accessibile information to download links
 */

/**
 * Implements hook_page_build().
 */
function download_link_labeler_page_build() {
  $path = drupal_get_path('module', 'download_link_labeler');
  drupal_add_css($path .'/css/download_link_labeler.css', array('every_page' => TRUE));
}

/**
 * Implements hook_filter_info().
 */
function download_link_labeler_filter_info() {
  $filters = array();
  $filters['download_link_labeler'] = array(
    'title' => t('Download Link Labeler'),
    'settings callback' => '_download_link_labeler_settings',
    'default settings' => array(
      'included_extentions' => 'pdf doc docx ppt pptx xls xlsx zip',
    ),
    'process callback' => '_download_link_labeler_process_filter',
    'tips callback' => '_download_link_labeler_tips',
    'weight' => 20,
    'cache' => TRUE,
  );
  return $filters;
}

/**
 * New Download Link Labeler class to allow for use of variables in the preg replace callback function
 */
Class DownloadLinks {
  // Add properties
  var $text;
  var $safeText;
  var $filter;
  var $format;
  var $includedExtensions;
  var $excludedDomains;
  // Pull in the list of extensions from the settings and create an array
  function _download_link_labeler_set_included_extensions() {
    $this->includedExtensions = preg_split('/\s+|,+|,\s+/', $this->filter->settings['included_extentions'], -1, PREG_SPLIT_NO_EMPTY);
  }
  // Set the regex pattern
  var $pattern = '/<a[^<>]*href="([^<>"]*)"[^<]*>((?:[^<]+|<(?!\/a>))*)<\/a>((?:&nbsp;)\([^<>\(\)]*\)(?:&nbsp;)\([^<>\(\)]*\)|(?:&nbsp;)\s\([^<>\(\)]*\)(?:&nbsp;)\([^<>\(\)]*\)|\s\([^<>\(\)]*\)\s\([^<>\(\)]*\)|(?:&nbsp;)\([^<>\(\)]*\)\s\([^<>\(\)]*\)|(?:&nbsp;)\s\([^<>\(\)]*\)\s\([^<>\(\)]*\)|\s?\([^<>\(\)]*\)\s?\([^<>\(\)]*\)|(?:&nbsp;)\([^<>\(\)]*\)(?:&nbsp;)\([^<>\(\)]*\)|)/i';
  function _download_link_labeler_replace_callback($matches) {
      // Set the initial logic of if the link external to be false
      $isExternal = FALSE;
      // Set the initial logic of if the link is a file download to false
      $isDownload = FALSE;
      /**
       * $matches array:
       * [0] = The entire link tag and optional existing file type and file size string
       * [1] = The href attribute string
       * [2] = The string that is the full contents of the a tag
       * [3] = The existing file type and file size string OR blank
       */
      if (!empty($matches[1])) {
        // Set $href to the full href attribute from the target link
        $href = $matches[1];
        // If $href begins with two forward slashes
        if (substr($href, 0, 2) == '//') {
          // Set $isExternal variable to TRUE
          $isExternal = TRUE;
        }
        // Parse the href into an array of parts
        $hrefArray = parse_url($href);
        // If the path key is set in the new href array of parts
        if (isset($hrefArray['path'])) {
          // Set $path to the value of the path key
          $path = $hrefArray['path'];
          // Parse the path into an array of parts
          $pathArray = pathinfo($path);
          // If the extension key is set
          if (isset($pathArray['extension'])) {
            // Set the $extension variable to equal the value of the extension key
            $extension = strtolower($pathArray['extension']);
            // If the extension is in the array of included extensions
            if (in_array($extension, $this->includedExtensions)) {
              // Set $isDownload variable to TRUE
              $isDownload = TRUE;
            }
          }
        }
        // If the host is set
        if (isset($hrefArray['host'])) {
          // Set the host variable to equal the value of the host key
          $host = $hrefArray['host'];
          // If the $host varibale is not equal to the global base_url variable
          if ($host != $GLOBALS['base_url']) {
            // Set $isExternal variable to TRUE
            $isExternal = TRUE;
          }
        }
        // Set $result to to the value of the first element in the $matches array
        $result = $matches[0];
        // If both of the logic variables are FALSE
        if (!$isExternal && !$isDownload) {
          // Return the result unmodified
          return $result;
        }
        // If there is an existing filetype and filesize string
        if (!empty($matches[3])) {
          // Set $search variable to be the value of the 3 key in the $matches array
          $search = $matches[3];
          // Remove the existing filetype and filesize portion of the string
          $result = str_replace($search, '', $result);
        }
        // If the link is not external
        if (!$isExternal) {
          // If the link is a download with an extension matching the included extensions settings form input
          if ($isDownload) {
            // Set the local system path to the file using the urldecode() function and DRUPAL_ROOT constant
            $realPath = urldecode(DRUPAL_ROOT . $path);
            // Set the variable $bytes to the filesize of the file referenced by the real path
            $bytes = filesize($realPath);
            // Use Drupal function format_size to output the file size in the proper unit
            $fileSize = format_size($bytes);
          }
        }
        // If the link is external
        if ($isExternal) {
          // If the link is a download with an extension matching the included extensions settings form input
          if ($isDownload) {
            // Set the variable $bytes to the filesize of the file referenced by $href
            $bytes = remoteFileSize($href);
            // Use Drupal function format_size to output the file size in the proper unit
            $fileSize = format_size($bytes);
          }
        }
        // Add the file info label onto the $result string
        $result .= getFileLabel($extension, $fileSize);
        return $result;
      }
    }
  function _download_link_labeler_replace_text() {
    // Prevent useless processing if there are no link tags at all.
    if (stristr($this->text, '<a ') !== FALSE) {
      $that = $this;
      // Set the safe text variable to equal the filtered result
      $this->safeText = preg_replace_callback($this->pattern, array($this, '_download_link_labeler_replace_callback'), $this->text);
    }
    // Else if there are no links in the text property
    else {
      // Set the safe text to equal the text without a preg replace function
      $this->safeText = $this->text;
    }
  }
}

/**
 * Filter settings callback for the Download Link Labeler content filter.
 */
function _download_link_labeler_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;
  // Add included extensions settings form
  $settings['included_extentions'] = array(
    '#type' => 'textfield',
    '#title' => t('Included file type extentions'),
    '#default_value' => $filter->settings['included_extentions'],
    '#maxlength' => 1024,
    '#description' => t('A space separated list of file extensions to include in the automatic download links labeler.'),
  );
  return $settings;
}

/**
 * Filter tips callback. Display the help for using [caption] syntax.
 */
function _download_link_labeler_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('
      <p><strong>Download Link Labeler</strong></p>
      <p>PDF, DOC(X) and PPT(X) file downloads will have the filetype acronym and file size displayed after the link.</p>');
  }
  else {
    return check_plain(t('PDF, DOC(X), XLS(X), PPT(X) and ZIP file downloads will have the filetype acronym and file size displayed after the link.'));
  }
}

/**
 * Filter process callback. Replace the link tags with accessible information.
 */
function _download_link_labeler_process_filter($text, $filter, $format) {
  // Create new DownloadLinks object
  $object = new DownloadLinks;
  // Set text property from function parameters
  $object->text = $text;
  // Set filter property from function parameters
  $object->filter = $filter;
  // Set format property from function parameters
  $object->format = $format;
  // Set the includedExtensions property via method call
  $object->_download_link_labeler_set_included_extensions();
  // Replace text property with filtered text
  $object->_download_link_labeler_replace_text();
  return $object->safeText;
}

/**
 * Return downloadable file label.
 *
 * @param string $extension { The file type designated by the acronym at the end of the file name }
 * @param string $fileSize { A formatted string with a number and unit describing a file size }
 * @return string A human readable string representing the complete file label
 */
function getFileLabel($extension, $fileSize) {
  // Find spaces in fileSize variable string and replace with non-breaking spaces
  $fileSize = str_replace(' ', '&nbsp;', $fileSize);
  // Write fileLabel string using parameters
  $fileLabel = '&nbsp;<span class="label label-file label-file-' . $extension . '" aria-label="File Type and Size">' . $extension . '&nbsp;&nbsp;' . $fileSize . '</span>';
  return $fileLabel;
}

/**
 * Retrieve file size of remote file.
 *
 * @param string $url { A complete url encoded string with protocol, host and path }
 * @return string A human readable string representing the file size in understandable units, ie. 4.58 MB
 */
function remoteFileSize($url) {
  // Create HTTP HEAD request using drupal_http_request function
  $http = drupal_http_request($url, array('method' => 'HEAD'));
  // Set the $bytes variable to equal the content length
  $bytes = $http->headers['content-length'];
  // Set the result to equal the $bytes variable
  $result = $bytes;
  // Return the resulting file size in bytes
  return $result;
}